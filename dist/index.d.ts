declare const ABIS: {
    readonly SmartAccount: {
        abi: ({
            type: string;
            inputs: {
                name: string;
                type: string;
                internalType: string;
            }[];
            stateMutability: string;
            name?: undefined;
            outputs?: undefined;
            anonymous?: undefined;
        } | {
            type: string;
            stateMutability: string;
            inputs?: undefined;
            name?: undefined;
            outputs?: undefined;
            anonymous?: undefined;
        } | {
            type: string;
            name: string;
            inputs: ({
                name: string;
                type: string;
                internalType: string;
                components: {
                    name: string;
                    type: string;
                    internalType: string;
                }[];
            } | {
                name: string;
                type: string;
                internalType: string;
                components?: undefined;
            })[];
            outputs: {
                name: string;
                type: string;
                internalType: string;
            }[];
            stateMutability: string;
            anonymous?: undefined;
        } | {
            type: string;
            name: string;
            inputs: {
                name: string;
                type: string;
                indexed: boolean;
                internalType: string;
            }[];
            anonymous: boolean;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            type: string;
            name: string;
            inputs: never[];
            stateMutability?: undefined;
            outputs?: undefined;
            anonymous?: undefined;
        })[];
        bytecode: {
            object: string;
            sourceMap: string;
            linkReferences: {};
        };
        deployedBytecode: {
            object: string;
            sourceMap: string;
            linkReferences: {};
        };
        methodIdentifiers: {
            "addModule(address)": string;
            "addValidator(address)": string;
            "authorizedRecoveryModules(address)": string;
            "entryPoint()": string;
            "execute(address,uint256,bytes)": string;
            "executeBatch((address,uint256,bytes)[])": string;
            "executeWithSessionKey(address,address,uint256,bytes,uint256)": string;
            "getModuleAt(uint256)": string;
            "getModuleCount()": string;
            "getModules()": string;
            "getValidators()": string;
            "isModule(address)": string;
            "isValidSignature(bytes32,bytes)": string;
            "isValidator(address)": string;
            "owner()": string;
            "removeModule(address)": string;
            "removeValidator(address)": string;
            "setEntryPoint(address)": string;
            "setRecoveryModule(address,bool)": string;
            "transferOwnership(address)": string;
            "transferOwnershipFromRecovery(address,address)": string;
            "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": string;
        };
        rawMetadata: string;
        metadata: {
            compiler: {
                version: string;
            };
            language: string;
            output: {
                abi: ({
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    stateMutability: string;
                    type: string;
                    name?: undefined;
                    anonymous?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: never[];
                    type: string;
                    name: string;
                    stateMutability?: undefined;
                    anonymous?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                        indexed: boolean;
                    }[];
                    type: string;
                    name: string;
                    anonymous: boolean;
                    stateMutability?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    stateMutability: string;
                    type: string;
                    name: string;
                    anonymous?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: ({
                        internalType: string;
                        name: string;
                        type: string;
                        components: {
                            internalType: string;
                            name: string;
                            type: string;
                        }[];
                    } | {
                        internalType: string;
                        name: string;
                        type: string;
                        components?: undefined;
                    })[];
                    stateMutability: string;
                    type: string;
                    name: string;
                    outputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    anonymous?: undefined;
                })[];
                devdoc: {
                    kind: string;
                    methods: {
                        "executeBatch((address,uint256,bytes)[])": {
                            details: string;
                        };
                        "executeWithSessionKey(address,address,uint256,bytes,uint256)": {
                            details: string;
                            params: {
                                data: string;
                                sessionKey: string;
                                target: string;
                                value: string;
                                windowId: string;
                            };
                            returns: {
                                result: string;
                            };
                        };
                        "isValidSignature(bytes32,bytes)": {
                            details: string;
                            params: {
                                hash: string;
                                signature: string;
                            };
                            returns: {
                                _0: string;
                            };
                        };
                    };
                    version: number;
                };
                userdoc: {
                    kind: string;
                    methods: {
                        "executeWithSessionKey(address,address,uint256,bytes,uint256)": {
                            notice: string;
                        };
                        "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
                            notice: string;
                        };
                    };
                    version: number;
                };
            };
            settings: {
                remappings: string[];
                optimizer: {
                    enabled: boolean;
                    runs: number;
                };
                metadata: {
                    bytecodeHash: string;
                };
                compilationTarget: {
                    "src/SmartAccount.sol": string;
                };
                evmVersion: string;
                libraries: {};
                viaIR: boolean;
            };
            sources: {
                "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/SmartAccount.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/interfaces/IAccount.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/interfaces/IERC1271.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/interfaces/IEntryPoint.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/modules/IModule.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/modules/ModuleManagerOptimized.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/modules/SpendingLimitModule.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/validators/ISignatureValidator.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/validators/SessionKeyValidator.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/validators/ValidatorManager.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
            };
            version: number;
        };
        ast: {
            absolutePath: string;
            id: number;
            exportedSymbols: {
                ECDSA: number[];
                IAccount: number[];
                IERC1271: number[];
                IModule: number[];
                ISessionKeyExpiry: number[];
                ISignatureValidator: number[];
                MessageHashUtils: number[];
                ModuleManagerOptimized: number[];
                ReentrancyGuard: number[];
                SessionKeyValidator: number[];
                SmartAccount: number[];
                SpendingLimitExceeded: number[];
                SpendingLimitModule: number[];
                UserOperation: number[];
                ValidatorManager: number[];
            };
            nodeType: string;
            src: string;
            nodes: ({
                id: number;
                nodeType: string;
                src: string;
                nodes: never[];
                literals: string[];
                absolutePath?: undefined;
                file?: undefined;
                nameLocation?: undefined;
                scope?: undefined;
                sourceUnit?: undefined;
                symbolAliases?: undefined;
                unitAlias?: undefined;
                abstract?: undefined;
                baseContracts?: undefined;
                canonicalName?: undefined;
                contractDependencies?: undefined;
                contractKind?: undefined;
                fullyImplemented?: undefined;
                linearizedBaseContracts?: undefined;
                name?: undefined;
                usedErrors?: undefined;
                usedEvents?: undefined;
            } | {
                id: number;
                nodeType: string;
                src: string;
                nodes: never[];
                absolutePath: string;
                file: string;
                nameLocation: string;
                scope: number;
                sourceUnit: number;
                symbolAliases: {
                    foreign: {
                        id: number;
                        name: string;
                        nodeType: string;
                        overloadedDeclarations: never[];
                        referencedDeclaration: number;
                        src: string;
                        typeDescriptions: {};
                    };
                    nameLocation: string;
                }[];
                unitAlias: string;
                literals?: undefined;
                abstract?: undefined;
                baseContracts?: undefined;
                canonicalName?: undefined;
                contractDependencies?: undefined;
                contractKind?: undefined;
                fullyImplemented?: undefined;
                linearizedBaseContracts?: undefined;
                name?: undefined;
                usedErrors?: undefined;
                usedEvents?: undefined;
            } | {
                id: number;
                nodeType: string;
                src: string;
                nodes: {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                }[];
                abstract: boolean;
                baseContracts: never[];
                canonicalName: string;
                contractDependencies: never[];
                contractKind: string;
                fullyImplemented: boolean;
                linearizedBaseContracts: number[];
                name: string;
                nameLocation: string;
                scope: number;
                usedErrors: never[];
                usedEvents: never[];
                literals?: undefined;
                absolutePath?: undefined;
                file?: undefined;
                sourceUnit?: undefined;
                symbolAliases?: undefined;
                unitAlias?: undefined;
            } | {
                id: number;
                nodeType: string;
                src: string;
                nodes: ({
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    global: boolean;
                    libraryName: {
                        id: number;
                        name: string;
                        nameLocations: string[];
                        nodeType: string;
                        referencedDeclaration: number;
                        src: string;
                    };
                    typeName: {
                        id: number;
                        name: string;
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        stateMutability?: undefined;
                        keyName?: undefined;
                        keyNameLocation?: undefined;
                        keyType?: undefined;
                        valueName?: undefined;
                        valueNameLocation?: undefined;
                        valueType?: undefined;
                    };
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    name?: undefined;
                    nameLocation?: undefined;
                    scope?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    visibility?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        name: string;
                        nodeType: string;
                        src: string;
                        stateMutability: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        keyName?: undefined;
                        keyNameLocation?: undefined;
                        keyType?: undefined;
                        valueName?: undefined;
                        valueNameLocation?: undefined;
                        valueType?: undefined;
                    };
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        keyName: string;
                        keyNameLocation: string;
                        keyType: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        valueName: string;
                        valueNameLocation: string;
                        valueType: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        name?: undefined;
                        stateMutability?: undefined;
                    };
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        name: string;
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        stateMutability?: undefined;
                        keyName?: undefined;
                        keyNameLocation?: undefined;
                        keyType?: undefined;
                        valueName?: undefined;
                        valueNameLocation?: undefined;
                        valueType?: undefined;
                    };
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    functionSelector?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    anonymous: boolean;
                    eventSelector: string;
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            indexed: boolean;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            indexed: boolean;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    scope?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    visibility?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    errorSelector: string;
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    scope?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    visibility?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    canonicalName: string;
                    members: ({
                        constant: boolean;
                        id: number;
                        mutability: string;
                        name: string;
                        nameLocation: string;
                        nodeType: string;
                        scope: number;
                        src: string;
                        stateVariable: boolean;
                        storageLocation: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        typeName: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            stateMutability: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        visibility: string;
                    } | {
                        constant: boolean;
                        id: number;
                        mutability: string;
                        name: string;
                        nameLocation: string;
                        nodeType: string;
                        scope: number;
                        src: string;
                        stateVariable: boolean;
                        storageLocation: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        typeName: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            stateMutability?: undefined;
                        };
                        visibility: string;
                    })[];
                    name: string;
                    nameLocation: string;
                    scope: number;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    errorSelector?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    scope?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    scope?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    arguments: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    arguments?: undefined;
                                    expression?: undefined;
                                    nameLocations?: undefined;
                                    names?: undefined;
                                    tryCall?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    scope?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: ({
                                    arguments: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {};
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                } | {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    arguments?: undefined;
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    nameLocations?: undefined;
                                    names?: undefined;
                                    tryCall?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    arguments: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    arguments?: undefined;
                                    expression?: undefined;
                                    nameLocations?: undefined;
                                    names?: undefined;
                                    tryCall?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    baseExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    baseExpression?: undefined;
                                    indexExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        })[];
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            condition: {
                                id: number;
                                name: string;
                                nodeType: string;
                                overloadedDeclarations: never[];
                                referencedDeclaration: number;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        arguments: ({
                                            arguments: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            hexValue?: undefined;
                                            value?: undefined;
                                        } | {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                            arguments?: undefined;
                                            expression?: undefined;
                                            nameLocations?: undefined;
                                            names?: undefined;
                                            tryCall?: undefined;
                                        })[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: number[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            expression?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    baseExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                name?: undefined;
                                overloadedDeclarations?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            eventCall?: undefined;
                            trueBody?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                name?: undefined;
                                overloadedDeclarations?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            eventCall?: undefined;
                            trueBody?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    baseType: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: never[];
                                expression: {
                                    argumentTypes: never[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    names?: undefined;
                                    options?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            eventCall?: undefined;
                            trueBody?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                name?: undefined;
                                overloadedDeclarations?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            eventCall?: undefined;
                            trueBody?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            body: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    condition: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        operator: string;
                                        prefix: boolean;
                                        src: string;
                                        subExpression: {
                                            arguments: ({
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                name?: undefined;
                                                overloadedDeclarations?: undefined;
                                                referencedDeclaration?: undefined;
                                            } | {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                expression?: undefined;
                                                isConstant?: undefined;
                                                isLValue?: undefined;
                                                isPure?: undefined;
                                                lValueRequested?: undefined;
                                                memberLocation?: undefined;
                                                memberName?: undefined;
                                            })[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                expression: {
                                                    arguments: {
                                                        baseExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        indexExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    }[];
                                                    expression: {
                                                        argumentTypes: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        }[];
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nameLocations: never[];
                                                    names: never[];
                                                    nodeType: string;
                                                    src: string;
                                                    tryCall: boolean;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    trueBody: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: ({
                                            expression: {
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                leftHandSide: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                nodeType: string;
                                                operator: string;
                                                rightHandSide: {
                                                    hexValue: string;
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    value: string;
                                                };
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            errorCall?: undefined;
                                        } | {
                                            errorCall: {
                                                arguments: never[];
                                                expression: {
                                                    argumentTypes: never[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            expression?: undefined;
                                        })[];
                                    };
                                }[];
                            };
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            initializationExpression: {
                                assignments: number[];
                                declarations: {
                                    constant: boolean;
                                    id: number;
                                    mutability: string;
                                    name: string;
                                    nameLocation: string;
                                    nodeType: string;
                                    scope: number;
                                    src: string;
                                    stateVariable: boolean;
                                    storageLocation: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    typeName: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    visibility: string;
                                }[];
                                id: number;
                                initialValue: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                nodeType: string;
                                src: string;
                            };
                            isSimpleCounterLoop: boolean;
                            loopExpression: {
                                expression: {
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                            trueBody?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    names: string[];
                                    nodeType: string;
                                    options: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    }[];
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            eventCall?: undefined;
                            trueBody?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                name?: undefined;
                                overloadedDeclarations?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            eventCall?: undefined;
                            trueBody?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            trueBody?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        arguments: ({
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            name?: undefined;
                                            overloadedDeclarations?: undefined;
                                            referencedDeclaration?: undefined;
                                        } | {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            expression?: undefined;
                                            isConstant?: undefined;
                                            isLValue?: undefined;
                                            isPure?: undefined;
                                            lValueRequested?: undefined;
                                            memberLocation?: undefined;
                                            memberName?: undefined;
                                        })[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            body: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    assignments: number[];
                                    declarations: {
                                        constant: boolean;
                                        id: number;
                                        mutability: string;
                                        name: string;
                                        nameLocation: string;
                                        nodeType: string;
                                        scope: number;
                                        src: string;
                                        stateVariable: boolean;
                                        storageLocation: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        visibility: string;
                                    }[];
                                    id: number;
                                    initialValue: {
                                        arguments: ({
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            name?: undefined;
                                            overloadedDeclarations?: undefined;
                                            referencedDeclaration?: undefined;
                                        } | {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            expression?: undefined;
                                            isConstant?: undefined;
                                            isLValue?: undefined;
                                            isPure?: undefined;
                                            lValueRequested?: undefined;
                                            memberLocation?: undefined;
                                            memberName?: undefined;
                                        })[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            expression: {
                                                arguments: {
                                                    baseExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    indexExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    src: string;
                                    condition?: undefined;
                                    trueBody?: undefined;
                                } | {
                                    condition: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        operator: string;
                                        prefix: boolean;
                                        src: string;
                                        subExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    trueBody: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: {
                                            eventCall: {
                                                arguments: ({
                                                    baseExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    indexExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    name?: undefined;
                                                    overloadedDeclarations?: undefined;
                                                    referencedDeclaration?: undefined;
                                                } | {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    baseExpression?: undefined;
                                                    indexExpression?: undefined;
                                                    isConstant?: undefined;
                                                    isLValue?: undefined;
                                                    isPure?: undefined;
                                                    lValueRequested?: undefined;
                                                })[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                        }[];
                                    };
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                })[];
                            };
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            initializationExpression: {
                                assignments: number[];
                                declarations: {
                                    constant: boolean;
                                    id: number;
                                    mutability: string;
                                    name: string;
                                    nameLocation: string;
                                    nodeType: string;
                                    scope: number;
                                    src: string;
                                    stateVariable: boolean;
                                    storageLocation: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    typeName: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    visibility: string;
                                }[];
                                id: number;
                                initialValue: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                nodeType: string;
                                src: string;
                            };
                            isSimpleCounterLoop: boolean;
                            loopExpression: {
                                expression: {
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                            trueBody?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                id: number;
                                name: string;
                                nodeType: string;
                                overloadedDeclarations: never[];
                                referencedDeclaration: number;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                isConstant?: undefined;
                                isLValue?: undefined;
                                isPure?: undefined;
                                kind?: undefined;
                                lValueRequested?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            eventCall?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                name?: undefined;
                                overloadedDeclarations?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                name?: undefined;
                                overloadedDeclarations?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    baseType: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: never[];
                                expression: {
                                    argumentTypes: never[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    names?: undefined;
                                    options?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                name?: undefined;
                                overloadedDeclarations?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            body: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    condition: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        operator: string;
                                        prefix: boolean;
                                        src: string;
                                        subExpression: {
                                            arguments: ({
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                name?: undefined;
                                                overloadedDeclarations?: undefined;
                                                referencedDeclaration?: undefined;
                                            } | {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                expression?: undefined;
                                                isConstant?: undefined;
                                                isLValue?: undefined;
                                                isPure?: undefined;
                                                lValueRequested?: undefined;
                                                memberLocation?: undefined;
                                                memberName?: undefined;
                                            })[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                expression: {
                                                    arguments: {
                                                        baseExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        indexExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    }[];
                                                    expression: {
                                                        argumentTypes: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        }[];
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nameLocations: never[];
                                                    names: never[];
                                                    nodeType: string;
                                                    src: string;
                                                    tryCall: boolean;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    trueBody: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: ({
                                            expression: {
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                leftHandSide: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                nodeType: string;
                                                operator: string;
                                                rightHandSide: {
                                                    hexValue: string;
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    value: string;
                                                };
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            errorCall?: undefined;
                                        } | {
                                            errorCall: {
                                                arguments: never[];
                                                expression: {
                                                    argumentTypes: never[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            expression?: undefined;
                                        })[];
                                    };
                                }[];
                            };
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            initializationExpression: {
                                assignments: number[];
                                declarations: {
                                    constant: boolean;
                                    id: number;
                                    mutability: string;
                                    name: string;
                                    nameLocation: string;
                                    nodeType: string;
                                    scope: number;
                                    src: string;
                                    stateVariable: boolean;
                                    storageLocation: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    typeName: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    visibility: string;
                                }[];
                                id: number;
                                initialValue: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                nodeType: string;
                                src: string;
                            };
                            isSimpleCounterLoop: boolean;
                            loopExpression: {
                                expression: {
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        arguments: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    names: string[];
                                    nodeType: string;
                                    options: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    }[];
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                name?: undefined;
                                overloadedDeclarations?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            trueBody?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            body: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    assignments: number[];
                                    declarations: {
                                        constant: boolean;
                                        id: number;
                                        mutability: string;
                                        name: string;
                                        nameLocation: string;
                                        nodeType: string;
                                        scope: number;
                                        src: string;
                                        stateVariable: boolean;
                                        storageLocation: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        visibility: string;
                                    }[];
                                    id: number;
                                    initialValue: {
                                        arguments: ({
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            name?: undefined;
                                            overloadedDeclarations?: undefined;
                                            referencedDeclaration?: undefined;
                                        } | {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            expression?: undefined;
                                            isConstant?: undefined;
                                            isLValue?: undefined;
                                            isPure?: undefined;
                                            lValueRequested?: undefined;
                                            memberLocation?: undefined;
                                            memberName?: undefined;
                                        })[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            expression: {
                                                arguments: {
                                                    baseExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    indexExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    src: string;
                                    condition?: undefined;
                                    trueBody?: undefined;
                                } | {
                                    condition: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        operator: string;
                                        prefix: boolean;
                                        src: string;
                                        subExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    trueBody: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: {
                                            eventCall: {
                                                arguments: ({
                                                    baseExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    indexExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    name?: undefined;
                                                    overloadedDeclarations?: undefined;
                                                    referencedDeclaration?: undefined;
                                                } | {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    baseExpression?: undefined;
                                                    indexExpression?: undefined;
                                                    isConstant?: undefined;
                                                    isLValue?: undefined;
                                                    isPure?: undefined;
                                                    lValueRequested?: undefined;
                                                })[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                        }[];
                                    };
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                })[];
                            };
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            initializationExpression: {
                                assignments: number[];
                                declarations: {
                                    constant: boolean;
                                    id: number;
                                    mutability: string;
                                    name: string;
                                    nameLocation: string;
                                    nodeType: string;
                                    scope: number;
                                    src: string;
                                    stateVariable: boolean;
                                    storageLocation: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    typeName: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    visibility: string;
                                }[];
                                id: number;
                                initialValue: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                nodeType: string;
                                src: string;
                            };
                            isSimpleCounterLoop: boolean;
                            loopExpression: {
                                expression: {
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                id: number;
                                name: string;
                                nodeType: string;
                                overloadedDeclarations: never[];
                                referencedDeclaration: number;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                isConstant?: undefined;
                                isLValue?: undefined;
                                isPure?: undefined;
                                kind?: undefined;
                                lValueRequested?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                name?: undefined;
                                overloadedDeclarations?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    arguments: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            baseType: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                name?: undefined;
                                overloadedDeclarations?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    baseType: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: never[];
                                expression: {
                                    argumentTypes: never[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                name?: undefined;
                                overloadedDeclarations?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            body: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    expression: {
                                        arguments: ({
                                            commonType: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            leftExpression: {
                                                expression: {
                                                    baseExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    indexExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            nodeType: string;
                                            operator: string;
                                            rightExpression: {
                                                arguments: {
                                                    hexValue: string;
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    value: string;
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    typeName: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {};
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            hexValue?: undefined;
                                            kind?: undefined;
                                            value?: undefined;
                                        } | {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                            commonType?: undefined;
                                            leftExpression?: undefined;
                                            operator?: undefined;
                                            rightExpression?: undefined;
                                        })[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: number[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        leftHandSide?: undefined;
                                        operator?: undefined;
                                        rightHandSide?: undefined;
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    body?: undefined;
                                    condition?: undefined;
                                    initializationExpression?: undefined;
                                    isSimpleCounterLoop?: undefined;
                                    loopExpression?: undefined;
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                    eventCall?: undefined;
                                } | {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            baseExpression?: undefined;
                                            indexExpression?: undefined;
                                            isConstant?: undefined;
                                            isLValue?: undefined;
                                            isPure?: undefined;
                                            lValueRequested?: undefined;
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                            name?: undefined;
                                            overloadedDeclarations?: undefined;
                                            referencedDeclaration?: undefined;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        arguments?: undefined;
                                        expression?: undefined;
                                        kind?: undefined;
                                        nameLocations?: undefined;
                                        names?: undefined;
                                        tryCall?: undefined;
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    body?: undefined;
                                    condition?: undefined;
                                    initializationExpression?: undefined;
                                    isSimpleCounterLoop?: undefined;
                                    loopExpression?: undefined;
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                    eventCall?: undefined;
                                } | {
                                    body: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: {
                                            condition: {
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                operator: string;
                                                prefix: boolean;
                                                src: string;
                                                subExpression: {
                                                    arguments: ({
                                                        expression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            baseExpression?: undefined;
                                                            indexExpression?: undefined;
                                                            isConstant?: undefined;
                                                            isLValue?: undefined;
                                                            isPure?: undefined;
                                                            lValueRequested?: undefined;
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        memberLocation: string;
                                                        memberName: string;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        referencedDeclaration?: undefined;
                                                        hexValue?: undefined;
                                                        kind?: undefined;
                                                        value?: undefined;
                                                    } | {
                                                        expression: {
                                                            baseExpression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            indexExpression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            name?: undefined;
                                                            overloadedDeclarations?: undefined;
                                                            referencedDeclaration?: undefined;
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        memberLocation: string;
                                                        memberName: string;
                                                        nodeType: string;
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        hexValue?: undefined;
                                                        kind?: undefined;
                                                        value?: undefined;
                                                    } | {
                                                        hexValue: string;
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        value: string;
                                                        expression?: undefined;
                                                        memberLocation?: undefined;
                                                        memberName?: undefined;
                                                        referencedDeclaration?: undefined;
                                                    })[];
                                                    expression: {
                                                        argumentTypes: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        }[];
                                                        expression: {
                                                            arguments: {
                                                                baseExpression: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                indexExpression: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                nodeType: string;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            }[];
                                                            expression: {
                                                                argumentTypes: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                }[];
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nameLocations: never[];
                                                            names: never[];
                                                            nodeType: string;
                                                            src: string;
                                                            tryCall: boolean;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        memberLocation: string;
                                                        memberName: string;
                                                        nodeType: string;
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nameLocations: never[];
                                                    names: never[];
                                                    nodeType: string;
                                                    src: string;
                                                    tryCall: boolean;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            trueBody: {
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                statements: ({
                                                    expression: {
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        leftHandSide: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        nodeType: string;
                                                        operator: string;
                                                        rightHandSide: {
                                                            hexValue: string;
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            value: string;
                                                        };
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    errorCall?: undefined;
                                                } | {
                                                    errorCall: {
                                                        arguments: never[];
                                                        expression: {
                                                            argumentTypes: never[];
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nameLocations: never[];
                                                        names: never[];
                                                        nodeType: string;
                                                        src: string;
                                                        tryCall: boolean;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    expression?: undefined;
                                                })[];
                                            };
                                        }[];
                                    };
                                    condition: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    initializationExpression: {
                                        assignments: number[];
                                        declarations: {
                                            constant: boolean;
                                            id: number;
                                            mutability: string;
                                            name: string;
                                            nameLocation: string;
                                            nodeType: string;
                                            scope: number;
                                            src: string;
                                            stateVariable: boolean;
                                            storageLocation: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            visibility: string;
                                        }[];
                                        id: number;
                                        initialValue: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        nodeType: string;
                                        src: string;
                                    };
                                    isSimpleCounterLoop: boolean;
                                    loopExpression: {
                                        expression: {
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            operator: string;
                                            prefix: boolean;
                                            src: string;
                                            subExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                    };
                                    nodeType: string;
                                    src: string;
                                    expression?: undefined;
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                    eventCall?: undefined;
                                } | {
                                    assignments: number[];
                                    declarations: {
                                        constant: boolean;
                                        id: number;
                                        mutability: string;
                                        name: string;
                                        nameLocation: string;
                                        nodeType: string;
                                        scope: number;
                                        src: string;
                                        stateVariable: boolean;
                                        storageLocation: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        visibility: string;
                                    }[];
                                    id: number;
                                    initialValue: {
                                        arguments: {
                                            expression: {
                                                baseExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                indexExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                expression: {
                                                    expression: {
                                                        baseExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        indexExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            names: string[];
                                            nodeType: string;
                                            options: {
                                                expression: {
                                                    baseExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    indexExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            }[];
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    src: string;
                                    expression?: undefined;
                                    body?: undefined;
                                    condition?: undefined;
                                    initializationExpression?: undefined;
                                    isSimpleCounterLoop?: undefined;
                                    loopExpression?: undefined;
                                    eventCall?: undefined;
                                } | {
                                    expression: {
                                        arguments: ({
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            hexValue?: undefined;
                                            isConstant?: undefined;
                                            isLValue?: undefined;
                                            isPure?: undefined;
                                            kind?: undefined;
                                            lValueRequested?: undefined;
                                            value?: undefined;
                                        } | {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                            name?: undefined;
                                            overloadedDeclarations?: undefined;
                                            referencedDeclaration?: undefined;
                                        })[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: number[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        leftHandSide?: undefined;
                                        operator?: undefined;
                                        rightHandSide?: undefined;
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    body?: undefined;
                                    condition?: undefined;
                                    initializationExpression?: undefined;
                                    isSimpleCounterLoop?: undefined;
                                    loopExpression?: undefined;
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                    eventCall?: undefined;
                                } | {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            baseExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            indexExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            name?: undefined;
                                            overloadedDeclarations?: undefined;
                                            referencedDeclaration?: undefined;
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            hexValue?: undefined;
                                            isConstant?: undefined;
                                            isLValue?: undefined;
                                            isPure?: undefined;
                                            kind?: undefined;
                                            lValueRequested?: undefined;
                                            value?: undefined;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        arguments?: undefined;
                                        expression?: undefined;
                                        kind?: undefined;
                                        nameLocations?: undefined;
                                        names?: undefined;
                                        tryCall?: undefined;
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    body?: undefined;
                                    condition?: undefined;
                                    initializationExpression?: undefined;
                                    isSimpleCounterLoop?: undefined;
                                    loopExpression?: undefined;
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                    eventCall?: undefined;
                                } | {
                                    eventCall: {
                                        arguments: ({
                                            expression: {
                                                baseExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                indexExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            name?: undefined;
                                            overloadedDeclarations?: undefined;
                                        } | {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            expression?: undefined;
                                            isConstant?: undefined;
                                            isLValue?: undefined;
                                            isPure?: undefined;
                                            lValueRequested?: undefined;
                                            memberLocation?: undefined;
                                            memberName?: undefined;
                                        })[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    expression?: undefined;
                                    body?: undefined;
                                    condition?: undefined;
                                    initializationExpression?: undefined;
                                    isSimpleCounterLoop?: undefined;
                                    loopExpression?: undefined;
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                } | {
                                    body: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: ({
                                            assignments: number[];
                                            declarations: {
                                                constant: boolean;
                                                id: number;
                                                mutability: string;
                                                name: string;
                                                nameLocation: string;
                                                nodeType: string;
                                                scope: number;
                                                src: string;
                                                stateVariable: boolean;
                                                storageLocation: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                visibility: string;
                                            }[];
                                            id: number;
                                            initialValue: {
                                                arguments: ({
                                                    expression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        baseExpression?: undefined;
                                                        indexExpression?: undefined;
                                                        isConstant?: undefined;
                                                        isLValue?: undefined;
                                                        isPure?: undefined;
                                                        lValueRequested?: undefined;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    referencedDeclaration?: undefined;
                                                    name?: undefined;
                                                    overloadedDeclarations?: undefined;
                                                } | {
                                                    expression: {
                                                        baseExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        indexExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        name?: undefined;
                                                        overloadedDeclarations?: undefined;
                                                        referencedDeclaration?: undefined;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    name?: undefined;
                                                    overloadedDeclarations?: undefined;
                                                } | {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    expression?: undefined;
                                                    isConstant?: undefined;
                                                    isLValue?: undefined;
                                                    isPure?: undefined;
                                                    lValueRequested?: undefined;
                                                    memberLocation?: undefined;
                                                    memberName?: undefined;
                                                })[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    expression: {
                                                        arguments: {
                                                            baseExpression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            indexExpression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        }[];
                                                        expression: {
                                                            argumentTypes: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            }[];
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nameLocations: never[];
                                                        names: never[];
                                                        nodeType: string;
                                                        src: string;
                                                        tryCall: boolean;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            nodeType: string;
                                            src: string;
                                            condition?: undefined;
                                            trueBody?: undefined;
                                        } | {
                                            condition: {
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                operator: string;
                                                prefix: boolean;
                                                src: string;
                                                subExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            trueBody: {
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                statements: {
                                                    eventCall: {
                                                        arguments: ({
                                                            baseExpression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            indexExpression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            expression?: undefined;
                                                            memberLocation?: undefined;
                                                            memberName?: undefined;
                                                            referencedDeclaration?: undefined;
                                                        } | {
                                                            expression: {
                                                                baseExpression: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                indexExpression: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                nodeType: string;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            memberLocation: string;
                                                            memberName: string;
                                                            nodeType: string;
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            baseExpression?: undefined;
                                                            indexExpression?: undefined;
                                                        })[];
                                                        expression: {
                                                            argumentTypes: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            }[];
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nameLocations: never[];
                                                        names: never[];
                                                        nodeType: string;
                                                        src: string;
                                                        tryCall: boolean;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                }[];
                                            };
                                            assignments?: undefined;
                                            declarations?: undefined;
                                            initialValue?: undefined;
                                        })[];
                                    };
                                    condition: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    initializationExpression: {
                                        assignments: number[];
                                        declarations: {
                                            constant: boolean;
                                            id: number;
                                            mutability: string;
                                            name: string;
                                            nameLocation: string;
                                            nodeType: string;
                                            scope: number;
                                            src: string;
                                            stateVariable: boolean;
                                            storageLocation: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            visibility: string;
                                        }[];
                                        id: number;
                                        initialValue: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        nodeType: string;
                                        src: string;
                                    };
                                    isSimpleCounterLoop: boolean;
                                    loopExpression: {
                                        expression: {
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            operator: string;
                                            prefix: boolean;
                                            src: string;
                                            subExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                    };
                                    nodeType: string;
                                    src: string;
                                    expression?: undefined;
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                    eventCall?: undefined;
                                })[];
                            };
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            initializationExpression: {
                                assignments: number[];
                                declarations: {
                                    constant: boolean;
                                    id: number;
                                    mutability: string;
                                    name: string;
                                    nameLocation: string;
                                    nodeType: string;
                                    scope: number;
                                    src: string;
                                    stateVariable: boolean;
                                    storageLocation: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    typeName: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    visibility: string;
                                }[];
                                id: number;
                                initialValue: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                nodeType: string;
                                src: string;
                            };
                            isSimpleCounterLoop: boolean;
                            loopExpression: {
                                expression: {
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                id: number;
                                name: string;
                                nodeType: string;
                                overloadedDeclarations: never[];
                                referencedDeclaration: number;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                isConstant?: undefined;
                                isLValue?: undefined;
                                isPure?: undefined;
                                kind?: undefined;
                                lValueRequested?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                baseType: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                baseType: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                hexValue: string;
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                value: string;
                            };
                            nodeType: string;
                            src: string;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            trueBody?: undefined;
                        } | {
                            body: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            expression: {
                                                baseExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                indexExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            initializationExpression: {
                                assignments: number[];
                                declarations: {
                                    constant: boolean;
                                    id: number;
                                    mutability: string;
                                    name: string;
                                    nameLocation: string;
                                    nodeType: string;
                                    scope: number;
                                    src: string;
                                    stateVariable: boolean;
                                    storageLocation: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    typeName: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    visibility: string;
                                }[];
                                id: number;
                                initialValue: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                nodeType: string;
                                src: string;
                            };
                            isSimpleCounterLoop: boolean;
                            loopExpression: {
                                expression: {
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            trueBody?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    body: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: {
                                            clauses: ({
                                                block: {
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    statements: never[];
                                                };
                                                errorName: string;
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                parameters?: undefined;
                                            } | {
                                                block: {
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    statements: {
                                                        condition: {
                                                            commonType: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            leftExpression: {
                                                                expression: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                memberLocation: string;
                                                                memberName: string;
                                                                nodeType: string;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            nodeType: string;
                                                            operator: string;
                                                            rightExpression: {
                                                                hexValue: string;
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                kind: string;
                                                                lValueRequested: boolean;
                                                                nodeType: string;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                                value: string;
                                                            };
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        trueBody: {
                                                            id: number;
                                                            nodeType: string;
                                                            src: string;
                                                            statements: ({
                                                                assignments: number[];
                                                                declarations: {
                                                                    constant: boolean;
                                                                    id: number;
                                                                    mutability: string;
                                                                    name: string;
                                                                    nameLocation: string;
                                                                    nodeType: string;
                                                                    scope: number;
                                                                    src: string;
                                                                    stateVariable: boolean;
                                                                    storageLocation: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                    typeName: {
                                                                        id: number;
                                                                        name: string;
                                                                        nodeType: string;
                                                                        src: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                    };
                                                                    visibility: string;
                                                                }[];
                                                                id: number;
                                                                initialValue: {
                                                                    arguments: {
                                                                        id: number;
                                                                        name: string;
                                                                        nodeType: string;
                                                                        overloadedDeclarations: never[];
                                                                        referencedDeclaration: number;
                                                                        src: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                    }[];
                                                                    expression: {
                                                                        argumentTypes: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        }[];
                                                                        id: number;
                                                                        isConstant: boolean;
                                                                        isLValue: boolean;
                                                                        isPure: boolean;
                                                                        lValueRequested: boolean;
                                                                        nodeType: string;
                                                                        src: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                        typeName: {
                                                                            id: number;
                                                                            name: string;
                                                                            nodeType: string;
                                                                            src: string;
                                                                            typeDescriptions: {};
                                                                        };
                                                                    };
                                                                    id: number;
                                                                    isConstant: boolean;
                                                                    isLValue: boolean;
                                                                    isPure: boolean;
                                                                    kind: string;
                                                                    lValueRequested: boolean;
                                                                    nameLocations: never[];
                                                                    names: never[];
                                                                    nodeType: string;
                                                                    src: string;
                                                                    tryCall: boolean;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                nodeType: string;
                                                                src: string;
                                                                condition?: undefined;
                                                                trueBody?: undefined;
                                                            } | {
                                                                condition: {
                                                                    commonType: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                    id: number;
                                                                    isConstant: boolean;
                                                                    isLValue: boolean;
                                                                    isPure: boolean;
                                                                    lValueRequested: boolean;
                                                                    leftExpression: {
                                                                        id: number;
                                                                        name: string;
                                                                        nodeType: string;
                                                                        overloadedDeclarations: never[];
                                                                        referencedDeclaration: number;
                                                                        src: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                    };
                                                                    nodeType: string;
                                                                    operator: string;
                                                                    rightExpression: {
                                                                        expression: {
                                                                            id: number;
                                                                            name: string;
                                                                            nodeType: string;
                                                                            overloadedDeclarations: never[];
                                                                            referencedDeclaration: number;
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        id: number;
                                                                        isConstant: boolean;
                                                                        isLValue: boolean;
                                                                        isPure: boolean;
                                                                        lValueRequested: boolean;
                                                                        memberLocation: string;
                                                                        memberName: string;
                                                                        nodeType: string;
                                                                        src: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                    };
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                nodeType: string;
                                                                src: string;
                                                                trueBody: {
                                                                    id: number;
                                                                    nodeType: string;
                                                                    src: string;
                                                                    statements: {
                                                                        errorCall: {
                                                                            arguments: never[];
                                                                            expression: {
                                                                                argumentTypes: never[];
                                                                                id: number;
                                                                                name: string;
                                                                                nodeType: string;
                                                                                overloadedDeclarations: never[];
                                                                                referencedDeclaration: number;
                                                                                src: string;
                                                                                typeDescriptions: {
                                                                                    typeIdentifier: string;
                                                                                    typeString: string;
                                                                                };
                                                                            };
                                                                            id: number;
                                                                            isConstant: boolean;
                                                                            isLValue: boolean;
                                                                            isPure: boolean;
                                                                            kind: string;
                                                                            lValueRequested: boolean;
                                                                            nameLocations: never[];
                                                                            names: never[];
                                                                            nodeType: string;
                                                                            src: string;
                                                                            tryCall: boolean;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        id: number;
                                                                        nodeType: string;
                                                                        src: string;
                                                                    }[];
                                                                };
                                                                assignments?: undefined;
                                                                declarations?: undefined;
                                                                initialValue?: undefined;
                                                            })[];
                                                        };
                                                    }[];
                                                };
                                                errorName: string;
                                                id: number;
                                                nodeType: string;
                                                parameters: {
                                                    id: number;
                                                    nodeType: string;
                                                    parameters: {
                                                        constant: boolean;
                                                        id: number;
                                                        mutability: string;
                                                        name: string;
                                                        nameLocation: string;
                                                        nodeType: string;
                                                        scope: number;
                                                        src: string;
                                                        stateVariable: boolean;
                                                        storageLocation: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        typeName: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        visibility: string;
                                                    }[];
                                                    src: string;
                                                };
                                                src: string;
                                            })[];
                                            externalCall: {
                                                arguments: ({
                                                    expression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    name?: undefined;
                                                    overloadedDeclarations?: undefined;
                                                    referencedDeclaration?: undefined;
                                                } | {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    expression?: undefined;
                                                    isConstant?: undefined;
                                                    isLValue?: undefined;
                                                    isPure?: undefined;
                                                    lValueRequested?: undefined;
                                                    memberLocation?: undefined;
                                                    memberName?: undefined;
                                                })[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    expression: {
                                                        arguments: {
                                                            baseExpression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            indexExpression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        }[];
                                                        expression: {
                                                            argumentTypes: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            }[];
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nameLocations: never[];
                                                        names: never[];
                                                        nodeType: string;
                                                        src: string;
                                                        tryCall: boolean;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                        }[];
                                    };
                                    condition: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    initializationExpression: {
                                        assignments: number[];
                                        declarations: {
                                            constant: boolean;
                                            id: number;
                                            mutability: string;
                                            name: string;
                                            nameLocation: string;
                                            nodeType: string;
                                            scope: number;
                                            src: string;
                                            stateVariable: boolean;
                                            storageLocation: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            visibility: string;
                                        }[];
                                        id: number;
                                        initialValue: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        nodeType: string;
                                        src: string;
                                    };
                                    isSimpleCounterLoop: boolean;
                                    loopExpression: {
                                        expression: {
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            operator: string;
                                            prefix: boolean;
                                            src: string;
                                            subExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                    };
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                baseType: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    stateMutability?: undefined;
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                baseType: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    stateMutability: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    pathNode?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                hexValue: string;
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                value: string;
                                arguments?: undefined;
                                expression?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: (number | null)[];
                            declarations: ({
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    stateMutability: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    pathNode?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                visibility: string;
                            } | {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    stateMutability?: undefined;
                                };
                                visibility: string;
                            } | null)[];
                            id: number;
                            initialValue: {
                                arguments: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    expression: {
                                        arguments: never[];
                                        expression: {
                                            argumentTypes: never[];
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                hexValue?: undefined;
                                value?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        expression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                operator: string;
                                prefix: boolean;
                                src: string;
                                subExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                commonType?: undefined;
                                leftExpression?: undefined;
                                rightExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    assignments: number[];
                                    declarations: {
                                        constant: boolean;
                                        id: number;
                                        mutability: string;
                                        name: string;
                                        nameLocation: string;
                                        nodeType: string;
                                        scope: number;
                                        src: string;
                                        stateVariable: boolean;
                                        storageLocation: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            baseType: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        visibility: string;
                                    }[];
                                    id: number;
                                    initialValue: {
                                        arguments: never[];
                                        expression: {
                                            argumentTypes: never[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    src: string;
                                    body?: undefined;
                                    condition?: undefined;
                                    initializationExpression?: undefined;
                                    isSimpleCounterLoop?: undefined;
                                    loopExpression?: undefined;
                                } | {
                                    body: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: {
                                            condition: {
                                                arguments: ({
                                                    expression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    name?: undefined;
                                                    overloadedDeclarations?: undefined;
                                                } | {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    expression?: undefined;
                                                    isConstant?: undefined;
                                                    isLValue?: undefined;
                                                    isPure?: undefined;
                                                    lValueRequested?: undefined;
                                                    memberLocation?: undefined;
                                                    memberName?: undefined;
                                                })[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    expression: {
                                                        arguments: {
                                                            baseExpression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            indexExpression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        }[];
                                                        expression: {
                                                            argumentTypes: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            }[];
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nameLocations: never[];
                                                        names: never[];
                                                        nodeType: string;
                                                        src: string;
                                                        tryCall: boolean;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            trueBody: {
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                statements: ({
                                                    assignments: (number | null)[];
                                                    declarations: ({
                                                        constant: boolean;
                                                        id: number;
                                                        mutability: string;
                                                        name: string;
                                                        nameLocation: string;
                                                        nodeType: string;
                                                        scope: number;
                                                        src: string;
                                                        stateVariable: boolean;
                                                        storageLocation: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        typeName: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            src: string;
                                                            stateMutability: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            pathNode?: undefined;
                                                            referencedDeclaration?: undefined;
                                                        };
                                                        visibility: string;
                                                    } | {
                                                        constant: boolean;
                                                        id: number;
                                                        mutability: string;
                                                        name: string;
                                                        nameLocation: string;
                                                        nodeType: string;
                                                        scope: number;
                                                        src: string;
                                                        stateVariable: boolean;
                                                        storageLocation: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        typeName: {
                                                            id: number;
                                                            nodeType: string;
                                                            pathNode: {
                                                                id: number;
                                                                name: string;
                                                                nameLocations: string[];
                                                                nodeType: string;
                                                                referencedDeclaration: number;
                                                                src: string;
                                                            };
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            name?: undefined;
                                                            stateMutability?: undefined;
                                                        };
                                                        visibility: string;
                                                    } | null)[];
                                                    id: number;
                                                    initialValue: {
                                                        arguments: {
                                                            expression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            memberLocation: string;
                                                            memberName: string;
                                                            nodeType: string;
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        }[];
                                                        expression: {
                                                            argumentTypes: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            }[];
                                                            expression: {
                                                                arguments: never[];
                                                                expression: {
                                                                    argumentTypes: never[];
                                                                    expression: {
                                                                        id: number;
                                                                        name: string;
                                                                        nodeType: string;
                                                                        overloadedDeclarations: never[];
                                                                        referencedDeclaration: number;
                                                                        src: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                    };
                                                                    id: number;
                                                                    isConstant: boolean;
                                                                    isLValue: boolean;
                                                                    isPure: boolean;
                                                                    lValueRequested: boolean;
                                                                    memberLocation: string;
                                                                    memberName: string;
                                                                    nodeType: string;
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                kind: string;
                                                                lValueRequested: boolean;
                                                                nameLocations: never[];
                                                                names: never[];
                                                                nodeType: string;
                                                                src: string;
                                                                tryCall: boolean;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            memberLocation: string;
                                                            memberName: string;
                                                            nodeType: string;
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nameLocations: never[];
                                                        names: never[];
                                                        nodeType: string;
                                                        src: string;
                                                        tryCall: boolean;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    src: string;
                                                    condition?: undefined;
                                                    trueBody?: undefined;
                                                    expression?: undefined;
                                                } | {
                                                    condition: {
                                                        commonType: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        leftExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        nodeType: string;
                                                        operator: string;
                                                        rightExpression: {
                                                            expression: {
                                                                expression: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                memberLocation: string;
                                                                memberName: string;
                                                                nodeType: string;
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            memberLocation: string;
                                                            memberName: string;
                                                            nodeType: string;
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    trueBody: {
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        statements: ({
                                                            clauses: ({
                                                                block: {
                                                                    id: number;
                                                                    nodeType: string;
                                                                    src: string;
                                                                    statements: {
                                                                        expression: {
                                                                            id: number;
                                                                            isConstant: boolean;
                                                                            isLValue: boolean;
                                                                            isPure: boolean;
                                                                            lValueRequested: boolean;
                                                                            leftHandSide: {
                                                                                id: number;
                                                                                name: string;
                                                                                nodeType: string;
                                                                                overloadedDeclarations: never[];
                                                                                referencedDeclaration: number;
                                                                                src: string;
                                                                                typeDescriptions: {
                                                                                    typeIdentifier: string;
                                                                                    typeString: string;
                                                                                };
                                                                            };
                                                                            nodeType: string;
                                                                            operator: string;
                                                                            rightHandSide: {
                                                                                arguments: {
                                                                                    id: number;
                                                                                    name: string;
                                                                                    nodeType: string;
                                                                                    overloadedDeclarations: never[];
                                                                                    referencedDeclaration: number;
                                                                                    src: string;
                                                                                    typeDescriptions: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    };
                                                                                }[];
                                                                                expression: {
                                                                                    argumentTypes: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    }[];
                                                                                    id: number;
                                                                                    isConstant: boolean;
                                                                                    isLValue: boolean;
                                                                                    isPure: boolean;
                                                                                    lValueRequested: boolean;
                                                                                    nodeType: string;
                                                                                    src: string;
                                                                                    typeDescriptions: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    };
                                                                                    typeName: {
                                                                                        id: number;
                                                                                        name: string;
                                                                                        nodeType: string;
                                                                                        src: string;
                                                                                        typeDescriptions: {};
                                                                                    };
                                                                                };
                                                                                id: number;
                                                                                isConstant: boolean;
                                                                                isLValue: boolean;
                                                                                isPure: boolean;
                                                                                kind: string;
                                                                                lValueRequested: boolean;
                                                                                nameLocations: never[];
                                                                                names: never[];
                                                                                nodeType: string;
                                                                                src: string;
                                                                                tryCall: boolean;
                                                                                typeDescriptions: {
                                                                                    typeIdentifier: string;
                                                                                    typeString: string;
                                                                                };
                                                                            };
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        id: number;
                                                                        nodeType: string;
                                                                        src: string;
                                                                    }[];
                                                                };
                                                                errorName: string;
                                                                id: number;
                                                                nodeType: string;
                                                                parameters: {
                                                                    id: number;
                                                                    nodeType: string;
                                                                    parameters: {
                                                                        constant: boolean;
                                                                        id: number;
                                                                        mutability: string;
                                                                        name: string;
                                                                        nameLocation: string;
                                                                        nodeType: string;
                                                                        scope: number;
                                                                        src: string;
                                                                        stateVariable: boolean;
                                                                        storageLocation: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                        typeName: {
                                                                            id: number;
                                                                            name: string;
                                                                            nodeType: string;
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        visibility: string;
                                                                    }[];
                                                                    src: string;
                                                                };
                                                                src: string;
                                                            } | {
                                                                block: {
                                                                    id: number;
                                                                    nodeType: string;
                                                                    src: string;
                                                                    statements: never[];
                                                                };
                                                                errorName: string;
                                                                id: number;
                                                                nodeType: string;
                                                                src: string;
                                                                parameters?: undefined;
                                                            })[];
                                                            externalCall: {
                                                                arguments: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                }[];
                                                                expression: {
                                                                    argumentTypes: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    }[];
                                                                    expression: {
                                                                        arguments: {
                                                                            baseExpression: {
                                                                                id: number;
                                                                                name: string;
                                                                                nodeType: string;
                                                                                overloadedDeclarations: never[];
                                                                                referencedDeclaration: number;
                                                                                src: string;
                                                                                typeDescriptions: {
                                                                                    typeIdentifier: string;
                                                                                    typeString: string;
                                                                                };
                                                                            };
                                                                            id: number;
                                                                            indexExpression: {
                                                                                id: number;
                                                                                name: string;
                                                                                nodeType: string;
                                                                                overloadedDeclarations: never[];
                                                                                referencedDeclaration: number;
                                                                                src: string;
                                                                                typeDescriptions: {
                                                                                    typeIdentifier: string;
                                                                                    typeString: string;
                                                                                };
                                                                            };
                                                                            isConstant: boolean;
                                                                            isLValue: boolean;
                                                                            isPure: boolean;
                                                                            lValueRequested: boolean;
                                                                            nodeType: string;
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        }[];
                                                                        expression: {
                                                                            argumentTypes: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            }[];
                                                                            id: number;
                                                                            name: string;
                                                                            nodeType: string;
                                                                            overloadedDeclarations: never[];
                                                                            referencedDeclaration: number;
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        id: number;
                                                                        isConstant: boolean;
                                                                        isLValue: boolean;
                                                                        isPure: boolean;
                                                                        kind: string;
                                                                        lValueRequested: boolean;
                                                                        nameLocations: never[];
                                                                        names: never[];
                                                                        nodeType: string;
                                                                        src: string;
                                                                        tryCall: boolean;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                    };
                                                                    id: number;
                                                                    isConstant: boolean;
                                                                    isLValue: boolean;
                                                                    isPure: boolean;
                                                                    lValueRequested: boolean;
                                                                    memberLocation: string;
                                                                    memberName: string;
                                                                    nodeType: string;
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                kind: string;
                                                                lValueRequested: boolean;
                                                                nameLocations: never[];
                                                                names: never[];
                                                                nodeType: string;
                                                                src: string;
                                                                tryCall: boolean;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            nodeType: string;
                                                            src: string;
                                                        } | {
                                                            clauses: ({
                                                                block: {
                                                                    id: number;
                                                                    nodeType: string;
                                                                    src: string;
                                                                    statements: {
                                                                        condition: {
                                                                            commonType: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                            id: number;
                                                                            isConstant: boolean;
                                                                            isLValue: boolean;
                                                                            isPure: boolean;
                                                                            lValueRequested: boolean;
                                                                            leftExpression: {
                                                                                commonType: {
                                                                                    typeIdentifier: string;
                                                                                    typeString: string;
                                                                                };
                                                                                id: number;
                                                                                isConstant: boolean;
                                                                                isLValue: boolean;
                                                                                isPure: boolean;
                                                                                lValueRequested: boolean;
                                                                                leftExpression: {
                                                                                    id: number;
                                                                                    name: string;
                                                                                    nodeType: string;
                                                                                    overloadedDeclarations: never[];
                                                                                    referencedDeclaration: number;
                                                                                    src: string;
                                                                                    typeDescriptions: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    };
                                                                                };
                                                                                nodeType: string;
                                                                                operator: string;
                                                                                rightExpression: {
                                                                                    hexValue: string;
                                                                                    id: number;
                                                                                    isConstant: boolean;
                                                                                    isLValue: boolean;
                                                                                    isPure: boolean;
                                                                                    kind: string;
                                                                                    lValueRequested: boolean;
                                                                                    nodeType: string;
                                                                                    src: string;
                                                                                    typeDescriptions: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    };
                                                                                    value: string;
                                                                                };
                                                                                src: string;
                                                                                typeDescriptions: {
                                                                                    typeIdentifier: string;
                                                                                    typeString: string;
                                                                                };
                                                                            };
                                                                            nodeType: string;
                                                                            operator: string;
                                                                            rightExpression: {
                                                                                commonType: {
                                                                                    typeIdentifier: string;
                                                                                    typeString: string;
                                                                                };
                                                                                id: number;
                                                                                isConstant: boolean;
                                                                                isLValue: boolean;
                                                                                isPure: boolean;
                                                                                lValueRequested: boolean;
                                                                                leftExpression: {
                                                                                    expression: {
                                                                                        expression: {
                                                                                            id: number;
                                                                                            name: string;
                                                                                            nodeType: string;
                                                                                            overloadedDeclarations: never[];
                                                                                            referencedDeclaration: number;
                                                                                            src: string;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                        };
                                                                                        id: number;
                                                                                        isConstant: boolean;
                                                                                        isLValue: boolean;
                                                                                        isPure: boolean;
                                                                                        lValueRequested: boolean;
                                                                                        memberLocation: string;
                                                                                        memberName: string;
                                                                                        nodeType: string;
                                                                                        referencedDeclaration: number;
                                                                                        src: string;
                                                                                        typeDescriptions: {
                                                                                            typeIdentifier: string;
                                                                                            typeString: string;
                                                                                        };
                                                                                    };
                                                                                    id: number;
                                                                                    isConstant: boolean;
                                                                                    isLValue: boolean;
                                                                                    isPure: boolean;
                                                                                    lValueRequested: boolean;
                                                                                    memberLocation: string;
                                                                                    memberName: string;
                                                                                    nodeType: string;
                                                                                    src: string;
                                                                                    typeDescriptions: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    };
                                                                                };
                                                                                nodeType: string;
                                                                                operator: string;
                                                                                rightExpression: {
                                                                                    hexValue: string;
                                                                                    id: number;
                                                                                    isConstant: boolean;
                                                                                    isLValue: boolean;
                                                                                    isPure: boolean;
                                                                                    kind: string;
                                                                                    lValueRequested: boolean;
                                                                                    nodeType: string;
                                                                                    src: string;
                                                                                    typeDescriptions: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    };
                                                                                    value: string;
                                                                                };
                                                                                src: string;
                                                                                typeDescriptions: {
                                                                                    typeIdentifier: string;
                                                                                    typeString: string;
                                                                                };
                                                                            };
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        id: number;
                                                                        nodeType: string;
                                                                        src: string;
                                                                        trueBody: {
                                                                            id: number;
                                                                            nodeType: string;
                                                                            src: string;
                                                                            statements: ({
                                                                                assignments: number[];
                                                                                declarations: {
                                                                                    constant: boolean;
                                                                                    id: number;
                                                                                    mutability: string;
                                                                                    name: string;
                                                                                    nameLocation: string;
                                                                                    nodeType: string;
                                                                                    scope: number;
                                                                                    src: string;
                                                                                    stateVariable: boolean;
                                                                                    storageLocation: string;
                                                                                    typeDescriptions: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    };
                                                                                    typeName: {
                                                                                        id: number;
                                                                                        name: string;
                                                                                        nodeType: string;
                                                                                        src: string;
                                                                                        typeDescriptions: {
                                                                                            typeIdentifier: string;
                                                                                            typeString: string;
                                                                                        };
                                                                                    };
                                                                                    visibility: string;
                                                                                }[];
                                                                                id: number;
                                                                                initialValue: {
                                                                                    arguments: {
                                                                                        expression: {
                                                                                            id: number;
                                                                                            name: string;
                                                                                            nodeType: string;
                                                                                            overloadedDeclarations: never[];
                                                                                            referencedDeclaration: number;
                                                                                            src: string;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                        };
                                                                                        id: number;
                                                                                        isConstant: boolean;
                                                                                        isLValue: boolean;
                                                                                        isPure: boolean;
                                                                                        lValueRequested: boolean;
                                                                                        memberLocation: string;
                                                                                        memberName: string;
                                                                                        nodeType: string;
                                                                                        referencedDeclaration: number;
                                                                                        src: string;
                                                                                        typeDescriptions: {
                                                                                            typeIdentifier: string;
                                                                                            typeString: string;
                                                                                        };
                                                                                    }[];
                                                                                    expression: {
                                                                                        argumentTypes: {
                                                                                            typeIdentifier: string;
                                                                                            typeString: string;
                                                                                        }[];
                                                                                        id: number;
                                                                                        isConstant: boolean;
                                                                                        isLValue: boolean;
                                                                                        isPure: boolean;
                                                                                        lValueRequested: boolean;
                                                                                        nodeType: string;
                                                                                        src: string;
                                                                                        typeDescriptions: {
                                                                                            typeIdentifier: string;
                                                                                            typeString: string;
                                                                                        };
                                                                                        typeName: {
                                                                                            id: number;
                                                                                            name: string;
                                                                                            nodeType: string;
                                                                                            src: string;
                                                                                            typeDescriptions: {};
                                                                                        };
                                                                                    };
                                                                                    id: number;
                                                                                    isConstant: boolean;
                                                                                    isLValue: boolean;
                                                                                    isPure: boolean;
                                                                                    kind: string;
                                                                                    lValueRequested: boolean;
                                                                                    nameLocations: never[];
                                                                                    names: never[];
                                                                                    nodeType: string;
                                                                                    src: string;
                                                                                    tryCall: boolean;
                                                                                    typeDescriptions: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    };
                                                                                };
                                                                                nodeType: string;
                                                                                src: string;
                                                                                condition?: undefined;
                                                                                trueBody?: undefined;
                                                                            } | {
                                                                                condition: {
                                                                                    id: number;
                                                                                    isConstant: boolean;
                                                                                    isLValue: boolean;
                                                                                    isPure: boolean;
                                                                                    lValueRequested: boolean;
                                                                                    nodeType: string;
                                                                                    operator: string;
                                                                                    prefix: boolean;
                                                                                    src: string;
                                                                                    subExpression: {
                                                                                        arguments: {
                                                                                            id: number;
                                                                                            name: string;
                                                                                            nodeType: string;
                                                                                            overloadedDeclarations: never[];
                                                                                            referencedDeclaration: number;
                                                                                            src: string;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                        }[];
                                                                                        expression: {
                                                                                            argumentTypes: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            }[];
                                                                                            expression: {
                                                                                                arguments: {
                                                                                                    baseExpression: {
                                                                                                        id: number;
                                                                                                        name: string;
                                                                                                        nodeType: string;
                                                                                                        overloadedDeclarations: never[];
                                                                                                        referencedDeclaration: number;
                                                                                                        src: string;
                                                                                                        typeDescriptions: {
                                                                                                            typeIdentifier: string;
                                                                                                            typeString: string;
                                                                                                        };
                                                                                                    };
                                                                                                    id: number;
                                                                                                    indexExpression: {
                                                                                                        id: number;
                                                                                                        name: string;
                                                                                                        nodeType: string;
                                                                                                        overloadedDeclarations: never[];
                                                                                                        referencedDeclaration: number;
                                                                                                        src: string;
                                                                                                        typeDescriptions: {
                                                                                                            typeIdentifier: string;
                                                                                                            typeString: string;
                                                                                                        };
                                                                                                    };
                                                                                                    isConstant: boolean;
                                                                                                    isLValue: boolean;
                                                                                                    isPure: boolean;
                                                                                                    lValueRequested: boolean;
                                                                                                    nodeType: string;
                                                                                                    src: string;
                                                                                                    typeDescriptions: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    };
                                                                                                }[];
                                                                                                expression: {
                                                                                                    argumentTypes: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    }[];
                                                                                                    id: number;
                                                                                                    name: string;
                                                                                                    nodeType: string;
                                                                                                    overloadedDeclarations: never[];
                                                                                                    referencedDeclaration: number;
                                                                                                    src: string;
                                                                                                    typeDescriptions: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    };
                                                                                                };
                                                                                                id: number;
                                                                                                isConstant: boolean;
                                                                                                isLValue: boolean;
                                                                                                isPure: boolean;
                                                                                                kind: string;
                                                                                                lValueRequested: boolean;
                                                                                                nameLocations: never[];
                                                                                                names: never[];
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                                tryCall: boolean;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                            };
                                                                                            id: number;
                                                                                            isConstant: boolean;
                                                                                            isLValue: boolean;
                                                                                            isPure: boolean;
                                                                                            lValueRequested: boolean;
                                                                                            memberLocation: string;
                                                                                            memberName: string;
                                                                                            nodeType: string;
                                                                                            referencedDeclaration: number;
                                                                                            src: string;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                        };
                                                                                        id: number;
                                                                                        isConstant: boolean;
                                                                                        isLValue: boolean;
                                                                                        isPure: boolean;
                                                                                        kind: string;
                                                                                        lValueRequested: boolean;
                                                                                        nameLocations: never[];
                                                                                        names: never[];
                                                                                        nodeType: string;
                                                                                        src: string;
                                                                                        tryCall: boolean;
                                                                                        typeDescriptions: {
                                                                                            typeIdentifier: string;
                                                                                            typeString: string;
                                                                                        };
                                                                                    };
                                                                                    typeDescriptions: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    };
                                                                                    commonType?: undefined;
                                                                                    leftExpression?: undefined;
                                                                                    rightExpression?: undefined;
                                                                                };
                                                                                id: number;
                                                                                nodeType: string;
                                                                                src: string;
                                                                                trueBody: {
                                                                                    id: number;
                                                                                    nodeType: string;
                                                                                    src: string;
                                                                                    statements: {
                                                                                        id: number;
                                                                                        nodeType: string;
                                                                                        src: string;
                                                                                    }[];
                                                                                };
                                                                                assignments?: undefined;
                                                                                declarations?: undefined;
                                                                                initialValue?: undefined;
                                                                            } | {
                                                                                condition: {
                                                                                    commonType: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    };
                                                                                    id: number;
                                                                                    isConstant: boolean;
                                                                                    isLValue: boolean;
                                                                                    isPure: boolean;
                                                                                    lValueRequested: boolean;
                                                                                    leftExpression: {
                                                                                        id: number;
                                                                                        name: string;
                                                                                        nodeType: string;
                                                                                        overloadedDeclarations: never[];
                                                                                        referencedDeclaration: number;
                                                                                        src: string;
                                                                                        typeDescriptions: {
                                                                                            typeIdentifier: string;
                                                                                            typeString: string;
                                                                                        };
                                                                                    };
                                                                                    nodeType: string;
                                                                                    operator: string;
                                                                                    rightExpression: {
                                                                                        arguments: {
                                                                                            arguments: {
                                                                                                hexValue: string;
                                                                                                id: number;
                                                                                                isConstant: boolean;
                                                                                                isLValue: boolean;
                                                                                                isPure: boolean;
                                                                                                kind: string;
                                                                                                lValueRequested: boolean;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                                value: string;
                                                                                            }[];
                                                                                            expression: {
                                                                                                argumentTypes: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                }[];
                                                                                                id: number;
                                                                                                name: string;
                                                                                                nodeType: string;
                                                                                                overloadedDeclarations: never[];
                                                                                                referencedDeclaration: number;
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                            };
                                                                                            id: number;
                                                                                            isConstant: boolean;
                                                                                            isLValue: boolean;
                                                                                            isPure: boolean;
                                                                                            kind: string;
                                                                                            lValueRequested: boolean;
                                                                                            nameLocations: never[];
                                                                                            names: never[];
                                                                                            nodeType: string;
                                                                                            src: string;
                                                                                            tryCall: boolean;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                        }[];
                                                                                        expression: {
                                                                                            argumentTypes: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            }[];
                                                                                            id: number;
                                                                                            isConstant: boolean;
                                                                                            isLValue: boolean;
                                                                                            isPure: boolean;
                                                                                            lValueRequested: boolean;
                                                                                            nodeType: string;
                                                                                            src: string;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                            typeName: {
                                                                                                id: number;
                                                                                                name: string;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                                typeDescriptions: {};
                                                                                            };
                                                                                        };
                                                                                        id: number;
                                                                                        isConstant: boolean;
                                                                                        isLValue: boolean;
                                                                                        isPure: boolean;
                                                                                        kind: string;
                                                                                        lValueRequested: boolean;
                                                                                        nameLocations: never[];
                                                                                        names: never[];
                                                                                        nodeType: string;
                                                                                        src: string;
                                                                                        tryCall: boolean;
                                                                                        typeDescriptions: {
                                                                                            typeIdentifier: string;
                                                                                            typeString: string;
                                                                                        };
                                                                                    };
                                                                                    src: string;
                                                                                    typeDescriptions: {
                                                                                        typeIdentifier: string;
                                                                                        typeString: string;
                                                                                    };
                                                                                    prefix?: undefined;
                                                                                    subExpression?: undefined;
                                                                                };
                                                                                id: number;
                                                                                nodeType: string;
                                                                                src: string;
                                                                                trueBody: {
                                                                                    id: number;
                                                                                    nodeType: string;
                                                                                    src: string;
                                                                                    statements: ({
                                                                                        assignments: number[];
                                                                                        declarations: ({
                                                                                            constant: boolean;
                                                                                            id: number;
                                                                                            mutability: string;
                                                                                            name: string;
                                                                                            nameLocation: string;
                                                                                            nodeType: string;
                                                                                            scope: number;
                                                                                            src: string;
                                                                                            stateVariable: boolean;
                                                                                            storageLocation: string;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                            typeName: {
                                                                                                id: number;
                                                                                                name: string;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                                stateMutability: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                            };
                                                                                            visibility: string;
                                                                                        } | {
                                                                                            constant: boolean;
                                                                                            id: number;
                                                                                            mutability: string;
                                                                                            name: string;
                                                                                            nameLocation: string;
                                                                                            nodeType: string;
                                                                                            scope: number;
                                                                                            src: string;
                                                                                            stateVariable: boolean;
                                                                                            storageLocation: string;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                            typeName: {
                                                                                                id: number;
                                                                                                name: string;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                                stateMutability?: undefined;
                                                                                            };
                                                                                            visibility: string;
                                                                                        })[];
                                                                                        id: number;
                                                                                        initialValue: {
                                                                                            arguments: ({
                                                                                                baseExpression: {
                                                                                                    expression: {
                                                                                                        id: number;
                                                                                                        name: string;
                                                                                                        nodeType: string;
                                                                                                        overloadedDeclarations: never[];
                                                                                                        referencedDeclaration: number;
                                                                                                        src: string;
                                                                                                        typeDescriptions: {
                                                                                                            typeIdentifier: string;
                                                                                                            typeString: string;
                                                                                                        };
                                                                                                    };
                                                                                                    id: number;
                                                                                                    isConstant: boolean;
                                                                                                    isLValue: boolean;
                                                                                                    isPure: boolean;
                                                                                                    lValueRequested: boolean;
                                                                                                    memberLocation: string;
                                                                                                    memberName: string;
                                                                                                    nodeType: string;
                                                                                                    referencedDeclaration: number;
                                                                                                    src: string;
                                                                                                    typeDescriptions: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    };
                                                                                                };
                                                                                                id: number;
                                                                                                isConstant: boolean;
                                                                                                isLValue: boolean;
                                                                                                isPure: boolean;
                                                                                                lValueRequested: boolean;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                                startExpression: {
                                                                                                    hexValue: string;
                                                                                                    id: number;
                                                                                                    isConstant: boolean;
                                                                                                    isLValue: boolean;
                                                                                                    isPure: boolean;
                                                                                                    kind: string;
                                                                                                    lValueRequested: boolean;
                                                                                                    nodeType: string;
                                                                                                    src: string;
                                                                                                    typeDescriptions: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    };
                                                                                                    value: string;
                                                                                                };
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                                components?: undefined;
                                                                                                isInlineArray?: undefined;
                                                                                            } | {
                                                                                                components: {
                                                                                                    id: number;
                                                                                                    isConstant: boolean;
                                                                                                    isLValue: boolean;
                                                                                                    isPure: boolean;
                                                                                                    lValueRequested: boolean;
                                                                                                    nodeType: string;
                                                                                                    src: string;
                                                                                                    typeDescriptions: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    };
                                                                                                    typeName: {
                                                                                                        id: number;
                                                                                                        name: string;
                                                                                                        nodeType: string;
                                                                                                        src: string;
                                                                                                        typeDescriptions: {};
                                                                                                    };
                                                                                                }[];
                                                                                                id: number;
                                                                                                isConstant: boolean;
                                                                                                isInlineArray: boolean;
                                                                                                isLValue: boolean;
                                                                                                isPure: boolean;
                                                                                                lValueRequested: boolean;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                                baseExpression?: undefined;
                                                                                                startExpression?: undefined;
                                                                                            })[];
                                                                                            expression: {
                                                                                                argumentTypes: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                }[];
                                                                                                expression: {
                                                                                                    id: number;
                                                                                                    name: string;
                                                                                                    nodeType: string;
                                                                                                    overloadedDeclarations: never[];
                                                                                                    referencedDeclaration: number;
                                                                                                    src: string;
                                                                                                    typeDescriptions: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    };
                                                                                                };
                                                                                                id: number;
                                                                                                isConstant: boolean;
                                                                                                isLValue: boolean;
                                                                                                isPure: boolean;
                                                                                                lValueRequested: boolean;
                                                                                                memberLocation: string;
                                                                                                memberName: string;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                                typeName?: undefined;
                                                                                            };
                                                                                            id: number;
                                                                                            isConstant: boolean;
                                                                                            isLValue: boolean;
                                                                                            isPure: boolean;
                                                                                            kind: string;
                                                                                            lValueRequested: boolean;
                                                                                            nameLocations: never[];
                                                                                            names: never[];
                                                                                            nodeType: string;
                                                                                            src: string;
                                                                                            tryCall: boolean;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                        };
                                                                                        nodeType: string;
                                                                                        src: string;
                                                                                        condition?: undefined;
                                                                                        trueBody?: undefined;
                                                                                    } | {
                                                                                        condition: {
                                                                                            commonType: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                            id: number;
                                                                                            isConstant: boolean;
                                                                                            isLValue: boolean;
                                                                                            isPure: boolean;
                                                                                            lValueRequested: boolean;
                                                                                            leftExpression: {
                                                                                                id: number;
                                                                                                name: string;
                                                                                                nodeType: string;
                                                                                                overloadedDeclarations: never[];
                                                                                                referencedDeclaration: number;
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                            };
                                                                                            nodeType: string;
                                                                                            operator: string;
                                                                                            rightExpression: {
                                                                                                id: number;
                                                                                                name: string;
                                                                                                nodeType: string;
                                                                                                overloadedDeclarations: never[];
                                                                                                referencedDeclaration: number;
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                            };
                                                                                            src: string;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                            arguments?: undefined;
                                                                                            expression?: undefined;
                                                                                            kind?: undefined;
                                                                                            nameLocations?: undefined;
                                                                                            names?: undefined;
                                                                                            tryCall?: undefined;
                                                                                            prefix?: undefined;
                                                                                            subExpression?: undefined;
                                                                                        };
                                                                                        id: number;
                                                                                        nodeType: string;
                                                                                        src: string;
                                                                                        trueBody: {
                                                                                            id: number;
                                                                                            nodeType: string;
                                                                                            src: string;
                                                                                            statements: {
                                                                                                id: number;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                            }[];
                                                                                        };
                                                                                        assignments?: undefined;
                                                                                        declarations?: undefined;
                                                                                        initialValue?: undefined;
                                                                                    } | {
                                                                                        assignments: number[];
                                                                                        declarations: {
                                                                                            constant: boolean;
                                                                                            id: number;
                                                                                            mutability: string;
                                                                                            name: string;
                                                                                            nameLocation: string;
                                                                                            nodeType: string;
                                                                                            scope: number;
                                                                                            src: string;
                                                                                            stateVariable: boolean;
                                                                                            storageLocation: string;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                            typeName: {
                                                                                                id: number;
                                                                                                name: string;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                            };
                                                                                            visibility: string;
                                                                                        }[];
                                                                                        id: number;
                                                                                        initialValue: {
                                                                                            arguments: {
                                                                                                commonType: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                                id: number;
                                                                                                isConstant: boolean;
                                                                                                isLValue: boolean;
                                                                                                isPure: boolean;
                                                                                                lValueRequested: boolean;
                                                                                                leftExpression: {
                                                                                                    id: number;
                                                                                                    name: string;
                                                                                                    nodeType: string;
                                                                                                    overloadedDeclarations: never[];
                                                                                                    referencedDeclaration: number;
                                                                                                    src: string;
                                                                                                    typeDescriptions: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    };
                                                                                                };
                                                                                                nodeType: string;
                                                                                                operator: string;
                                                                                                rightExpression: {
                                                                                                    hexValue: string;
                                                                                                    id: number;
                                                                                                    isConstant: boolean;
                                                                                                    isLValue: boolean;
                                                                                                    isPure: boolean;
                                                                                                    kind: string;
                                                                                                    lValueRequested: boolean;
                                                                                                    nodeType: string;
                                                                                                    src: string;
                                                                                                    subdenomination: string;
                                                                                                    typeDescriptions: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    };
                                                                                                    value: string;
                                                                                                };
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                            }[];
                                                                                            expression: {
                                                                                                argumentTypes: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                }[];
                                                                                                id: number;
                                                                                                isConstant: boolean;
                                                                                                isLValue: boolean;
                                                                                                isPure: boolean;
                                                                                                lValueRequested: boolean;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                                typeName: {
                                                                                                    id: number;
                                                                                                    name: string;
                                                                                                    nodeType: string;
                                                                                                    src: string;
                                                                                                    typeDescriptions: {};
                                                                                                };
                                                                                                expression?: undefined;
                                                                                                memberLocation?: undefined;
                                                                                                memberName?: undefined;
                                                                                            };
                                                                                            id: number;
                                                                                            isConstant: boolean;
                                                                                            isLValue: boolean;
                                                                                            isPure: boolean;
                                                                                            kind: string;
                                                                                            lValueRequested: boolean;
                                                                                            nameLocations: never[];
                                                                                            names: never[];
                                                                                            nodeType: string;
                                                                                            src: string;
                                                                                            tryCall: boolean;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                        };
                                                                                        nodeType: string;
                                                                                        src: string;
                                                                                        condition?: undefined;
                                                                                        trueBody?: undefined;
                                                                                    } | {
                                                                                        condition: {
                                                                                            arguments: {
                                                                                                id: number;
                                                                                                name: string;
                                                                                                nodeType: string;
                                                                                                overloadedDeclarations: never[];
                                                                                                referencedDeclaration: number;
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                            }[];
                                                                                            expression: {
                                                                                                argumentTypes: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                }[];
                                                                                                expression: {
                                                                                                    arguments: {
                                                                                                        baseExpression: {
                                                                                                            id: number;
                                                                                                            name: string;
                                                                                                            nodeType: string;
                                                                                                            overloadedDeclarations: never[];
                                                                                                            referencedDeclaration: number;
                                                                                                            src: string;
                                                                                                            typeDescriptions: {
                                                                                                                typeIdentifier: string;
                                                                                                                typeString: string;
                                                                                                            };
                                                                                                        };
                                                                                                        id: number;
                                                                                                        indexExpression: {
                                                                                                            id: number;
                                                                                                            name: string;
                                                                                                            nodeType: string;
                                                                                                            overloadedDeclarations: never[];
                                                                                                            referencedDeclaration: number;
                                                                                                            src: string;
                                                                                                            typeDescriptions: {
                                                                                                                typeIdentifier: string;
                                                                                                                typeString: string;
                                                                                                            };
                                                                                                        };
                                                                                                        isConstant: boolean;
                                                                                                        isLValue: boolean;
                                                                                                        isPure: boolean;
                                                                                                        lValueRequested: boolean;
                                                                                                        nodeType: string;
                                                                                                        src: string;
                                                                                                        typeDescriptions: {
                                                                                                            typeIdentifier: string;
                                                                                                            typeString: string;
                                                                                                        };
                                                                                                    }[];
                                                                                                    expression: {
                                                                                                        argumentTypes: {
                                                                                                            typeIdentifier: string;
                                                                                                            typeString: string;
                                                                                                        }[];
                                                                                                        id: number;
                                                                                                        name: string;
                                                                                                        nodeType: string;
                                                                                                        overloadedDeclarations: never[];
                                                                                                        referencedDeclaration: number;
                                                                                                        src: string;
                                                                                                        typeDescriptions: {
                                                                                                            typeIdentifier: string;
                                                                                                            typeString: string;
                                                                                                        };
                                                                                                    };
                                                                                                    id: number;
                                                                                                    isConstant: boolean;
                                                                                                    isLValue: boolean;
                                                                                                    isPure: boolean;
                                                                                                    kind: string;
                                                                                                    lValueRequested: boolean;
                                                                                                    nameLocations: never[];
                                                                                                    names: never[];
                                                                                                    nodeType: string;
                                                                                                    src: string;
                                                                                                    tryCall: boolean;
                                                                                                    typeDescriptions: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    };
                                                                                                };
                                                                                                id: number;
                                                                                                isConstant: boolean;
                                                                                                isLValue: boolean;
                                                                                                isPure: boolean;
                                                                                                lValueRequested: boolean;
                                                                                                memberLocation: string;
                                                                                                memberName: string;
                                                                                                nodeType: string;
                                                                                                referencedDeclaration: number;
                                                                                                src: string;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                            };
                                                                                            id: number;
                                                                                            isConstant: boolean;
                                                                                            isLValue: boolean;
                                                                                            isPure: boolean;
                                                                                            kind: string;
                                                                                            lValueRequested: boolean;
                                                                                            nameLocations: never[];
                                                                                            names: never[];
                                                                                            nodeType: string;
                                                                                            src: string;
                                                                                            tryCall: boolean;
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                            commonType?: undefined;
                                                                                            leftExpression?: undefined;
                                                                                            operator?: undefined;
                                                                                            rightExpression?: undefined;
                                                                                            prefix?: undefined;
                                                                                            subExpression?: undefined;
                                                                                        };
                                                                                        id: number;
                                                                                        nodeType: string;
                                                                                        src: string;
                                                                                        trueBody: {
                                                                                            id: number;
                                                                                            nodeType: string;
                                                                                            src: string;
                                                                                            statements: {
                                                                                                id: number;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                            }[];
                                                                                        };
                                                                                        assignments?: undefined;
                                                                                        declarations?: undefined;
                                                                                        initialValue?: undefined;
                                                                                    } | {
                                                                                        condition: {
                                                                                            id: number;
                                                                                            isConstant: boolean;
                                                                                            isLValue: boolean;
                                                                                            isPure: boolean;
                                                                                            lValueRequested: boolean;
                                                                                            nodeType: string;
                                                                                            operator: string;
                                                                                            prefix: boolean;
                                                                                            src: string;
                                                                                            subExpression: {
                                                                                                arguments: {
                                                                                                    id: number;
                                                                                                    name: string;
                                                                                                    nodeType: string;
                                                                                                    overloadedDeclarations: never[];
                                                                                                    referencedDeclaration: number;
                                                                                                    src: string;
                                                                                                    typeDescriptions: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    };
                                                                                                }[];
                                                                                                expression: {
                                                                                                    argumentTypes: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    }[];
                                                                                                    expression: {
                                                                                                        arguments: {
                                                                                                            baseExpression: {
                                                                                                                id: number;
                                                                                                                name: string;
                                                                                                                nodeType: string;
                                                                                                                overloadedDeclarations: never[];
                                                                                                                referencedDeclaration: number;
                                                                                                                src: string;
                                                                                                                typeDescriptions: {
                                                                                                                    typeIdentifier: string;
                                                                                                                    typeString: string;
                                                                                                                };
                                                                                                            };
                                                                                                            id: number;
                                                                                                            indexExpression: {
                                                                                                                id: number;
                                                                                                                name: string;
                                                                                                                nodeType: string;
                                                                                                                overloadedDeclarations: never[];
                                                                                                                referencedDeclaration: number;
                                                                                                                src: string;
                                                                                                                typeDescriptions: {
                                                                                                                    typeIdentifier: string;
                                                                                                                    typeString: string;
                                                                                                                };
                                                                                                            };
                                                                                                            isConstant: boolean;
                                                                                                            isLValue: boolean;
                                                                                                            isPure: boolean;
                                                                                                            lValueRequested: boolean;
                                                                                                            nodeType: string;
                                                                                                            src: string;
                                                                                                            typeDescriptions: {
                                                                                                                typeIdentifier: string;
                                                                                                                typeString: string;
                                                                                                            };
                                                                                                        }[];
                                                                                                        expression: {
                                                                                                            argumentTypes: {
                                                                                                                typeIdentifier: string;
                                                                                                                typeString: string;
                                                                                                            }[];
                                                                                                            id: number;
                                                                                                            name: string;
                                                                                                            nodeType: string;
                                                                                                            overloadedDeclarations: never[];
                                                                                                            referencedDeclaration: number;
                                                                                                            src: string;
                                                                                                            typeDescriptions: {
                                                                                                                typeIdentifier: string;
                                                                                                                typeString: string;
                                                                                                            };
                                                                                                        };
                                                                                                        id: number;
                                                                                                        isConstant: boolean;
                                                                                                        isLValue: boolean;
                                                                                                        isPure: boolean;
                                                                                                        kind: string;
                                                                                                        lValueRequested: boolean;
                                                                                                        nameLocations: never[];
                                                                                                        names: never[];
                                                                                                        nodeType: string;
                                                                                                        src: string;
                                                                                                        tryCall: boolean;
                                                                                                        typeDescriptions: {
                                                                                                            typeIdentifier: string;
                                                                                                            typeString: string;
                                                                                                        };
                                                                                                    };
                                                                                                    id: number;
                                                                                                    isConstant: boolean;
                                                                                                    isLValue: boolean;
                                                                                                    isPure: boolean;
                                                                                                    lValueRequested: boolean;
                                                                                                    memberLocation: string;
                                                                                                    memberName: string;
                                                                                                    nodeType: string;
                                                                                                    referencedDeclaration: number;
                                                                                                    src: string;
                                                                                                    typeDescriptions: {
                                                                                                        typeIdentifier: string;
                                                                                                        typeString: string;
                                                                                                    };
                                                                                                };
                                                                                                id: number;
                                                                                                isConstant: boolean;
                                                                                                isLValue: boolean;
                                                                                                isPure: boolean;
                                                                                                kind: string;
                                                                                                lValueRequested: boolean;
                                                                                                nameLocations: never[];
                                                                                                names: never[];
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                                tryCall: boolean;
                                                                                                typeDescriptions: {
                                                                                                    typeIdentifier: string;
                                                                                                    typeString: string;
                                                                                                };
                                                                                            };
                                                                                            typeDescriptions: {
                                                                                                typeIdentifier: string;
                                                                                                typeString: string;
                                                                                            };
                                                                                            commonType?: undefined;
                                                                                            leftExpression?: undefined;
                                                                                            rightExpression?: undefined;
                                                                                            arguments?: undefined;
                                                                                            expression?: undefined;
                                                                                            kind?: undefined;
                                                                                            nameLocations?: undefined;
                                                                                            names?: undefined;
                                                                                            tryCall?: undefined;
                                                                                        };
                                                                                        id: number;
                                                                                        nodeType: string;
                                                                                        src: string;
                                                                                        trueBody: {
                                                                                            id: number;
                                                                                            nodeType: string;
                                                                                            src: string;
                                                                                            statements: {
                                                                                                id: number;
                                                                                                nodeType: string;
                                                                                                src: string;
                                                                                            }[];
                                                                                        };
                                                                                        assignments?: undefined;
                                                                                        declarations?: undefined;
                                                                                        initialValue?: undefined;
                                                                                    })[];
                                                                                };
                                                                                assignments?: undefined;
                                                                                declarations?: undefined;
                                                                                initialValue?: undefined;
                                                                            })[];
                                                                        };
                                                                    }[];
                                                                };
                                                                errorName: string;
                                                                id: number;
                                                                nodeType: string;
                                                                parameters: {
                                                                    id: number;
                                                                    nodeType: string;
                                                                    parameters: {
                                                                        constant: boolean;
                                                                        id: number;
                                                                        mutability: string;
                                                                        name: string;
                                                                        nameLocation: string;
                                                                        nodeType: string;
                                                                        scope: number;
                                                                        src: string;
                                                                        stateVariable: boolean;
                                                                        storageLocation: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                        typeName: {
                                                                            id: number;
                                                                            name: string;
                                                                            nodeType: string;
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        visibility: string;
                                                                    }[];
                                                                    src: string;
                                                                };
                                                                src: string;
                                                            } | {
                                                                block: {
                                                                    id: number;
                                                                    nodeType: string;
                                                                    src: string;
                                                                    statements: never[];
                                                                };
                                                                errorName: string;
                                                                id: number;
                                                                nodeType: string;
                                                                src: string;
                                                                parameters?: undefined;
                                                            })[];
                                                            externalCall: {
                                                                arguments: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                }[];
                                                                expression: {
                                                                    argumentTypes: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    }[];
                                                                    expression: {
                                                                        arguments: {
                                                                            baseExpression: {
                                                                                id: number;
                                                                                name: string;
                                                                                nodeType: string;
                                                                                overloadedDeclarations: never[];
                                                                                referencedDeclaration: number;
                                                                                src: string;
                                                                                typeDescriptions: {
                                                                                    typeIdentifier: string;
                                                                                    typeString: string;
                                                                                };
                                                                            };
                                                                            id: number;
                                                                            indexExpression: {
                                                                                id: number;
                                                                                name: string;
                                                                                nodeType: string;
                                                                                overloadedDeclarations: never[];
                                                                                referencedDeclaration: number;
                                                                                src: string;
                                                                                typeDescriptions: {
                                                                                    typeIdentifier: string;
                                                                                    typeString: string;
                                                                                };
                                                                            };
                                                                            isConstant: boolean;
                                                                            isLValue: boolean;
                                                                            isPure: boolean;
                                                                            lValueRequested: boolean;
                                                                            nodeType: string;
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        }[];
                                                                        expression: {
                                                                            argumentTypes: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            }[];
                                                                            id: number;
                                                                            name: string;
                                                                            nodeType: string;
                                                                            overloadedDeclarations: never[];
                                                                            referencedDeclaration: number;
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        id: number;
                                                                        isConstant: boolean;
                                                                        isLValue: boolean;
                                                                        isPure: boolean;
                                                                        kind: string;
                                                                        lValueRequested: boolean;
                                                                        nameLocations: never[];
                                                                        names: never[];
                                                                        nodeType: string;
                                                                        src: string;
                                                                        tryCall: boolean;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                    };
                                                                    id: number;
                                                                    isConstant: boolean;
                                                                    isLValue: boolean;
                                                                    isPure: boolean;
                                                                    lValueRequested: boolean;
                                                                    memberLocation: string;
                                                                    memberName: string;
                                                                    nodeType: string;
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                kind: string;
                                                                lValueRequested: boolean;
                                                                nameLocations: never[];
                                                                names: never[];
                                                                nodeType: string;
                                                                src: string;
                                                                tryCall: boolean;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            nodeType: string;
                                                            src: string;
                                                        })[];
                                                    };
                                                    assignments?: undefined;
                                                    declarations?: undefined;
                                                    initialValue?: undefined;
                                                    expression?: undefined;
                                                } | {
                                                    expression: {
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        leftHandSide: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        nodeType: string;
                                                        operator: string;
                                                        rightHandSide: {
                                                            hexValue: string;
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            value: string;
                                                        };
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    assignments?: undefined;
                                                    declarations?: undefined;
                                                    initialValue?: undefined;
                                                    condition?: undefined;
                                                    trueBody?: undefined;
                                                } | {
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    assignments?: undefined;
                                                    declarations?: undefined;
                                                    initialValue?: undefined;
                                                    condition?: undefined;
                                                    trueBody?: undefined;
                                                    expression?: undefined;
                                                })[];
                                            };
                                        }[];
                                    };
                                    condition: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    initializationExpression: {
                                        assignments: number[];
                                        declarations: {
                                            constant: boolean;
                                            id: number;
                                            mutability: string;
                                            name: string;
                                            nameLocation: string;
                                            nodeType: string;
                                            scope: number;
                                            src: string;
                                            stateVariable: boolean;
                                            storageLocation: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            visibility: string;
                                        }[];
                                        id: number;
                                        initialValue: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        nodeType: string;
                                        src: string;
                                    };
                                    isSimpleCounterLoop: boolean;
                                    loopExpression: {
                                        expression: {
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            operator: string;
                                            prefix: boolean;
                                            src: string;
                                            subExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                    };
                                    nodeType: string;
                                    src: string;
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                })[];
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                commonType?: undefined;
                                leftExpression?: undefined;
                                operator?: undefined;
                                rightExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                operator: string;
                                prefix: boolean;
                                src: string;
                                subExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                commonType?: undefined;
                                leftExpression?: undefined;
                                rightExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    functionReturnParameters: number;
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        arguments: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        arguments: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    baseFunctions: number[];
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    overrides: {
                        id: number;
                        nodeType: string;
                        overrides: never[];
                        src: string;
                    };
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                nodeType: string;
                                pathNode: {
                                    id: number;
                                    name: string;
                                    nameLocations: string[];
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                };
                                referencedDeclaration: number;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                name?: undefined;
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                pathNode?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                hexValue: string;
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                value: string;
                                arguments?: undefined;
                                expression?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            body?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: (number | null)[];
                            declarations: ({
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    stateMutability: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    pathNode?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                visibility: string;
                            } | {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    stateMutability?: undefined;
                                };
                                visibility: string;
                            } | null)[];
                            id: number;
                            initialValue: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    expression: {
                                        arguments: never[];
                                        expression: {
                                            argumentTypes: never[];
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                hexValue?: undefined;
                                value?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            body?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        expression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    functionReturnParameters: number;
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    baseType: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: never[];
                                expression: {
                                    argumentTypes: never[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                hexValue?: undefined;
                                value?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            body?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            body: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    condition: {
                                        arguments: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            expression: {
                                                arguments: {
                                                    baseExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    indexExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    trueBody: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            functionReturnParameters: number;
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                        }[];
                                    };
                                }[];
                            };
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    commonType?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            initializationExpression: {
                                assignments: number[];
                                declarations: {
                                    constant: boolean;
                                    id: number;
                                    mutability: string;
                                    name: string;
                                    nameLocation: string;
                                    nodeType: string;
                                    scope: number;
                                    src: string;
                                    stateVariable: boolean;
                                    storageLocation: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    typeName: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    visibility: string;
                                }[];
                                id: number;
                                initialValue: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                nodeType: string;
                                src: string;
                            };
                            isSimpleCounterLoop: boolean;
                            loopExpression: {
                                expression: {
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                hexValue: string;
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                value: string;
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            body?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                        })[];
                    };
                    baseFunctions: number[];
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    overrides: {
                        id: number;
                        nodeType: string;
                        overrides: never[];
                        src: string;
                    };
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    baseType: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: never[];
                                expression: {
                                    argumentTypes: never[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            body?: undefined;
                            condition?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                        } | {
                            body: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    clauses: ({
                                        block: {
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            statements: {
                                                condition: {
                                                    commonType: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    leftExpression: {
                                                        commonType: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        leftExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        nodeType: string;
                                                        operator: string;
                                                        rightExpression: {
                                                            hexValue: string;
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            value: string;
                                                        };
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    operator: string;
                                                    rightExpression: {
                                                        commonType: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        leftExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        nodeType: string;
                                                        operator: string;
                                                        rightExpression: {
                                                            expression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            memberLocation: string;
                                                            memberName: string;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                trueBody: {
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    statements: ({
                                                        assignments: number[];
                                                        declarations: {
                                                            constant: boolean;
                                                            id: number;
                                                            mutability: string;
                                                            name: string;
                                                            nameLocation: string;
                                                            nodeType: string;
                                                            scope: number;
                                                            src: string;
                                                            stateVariable: boolean;
                                                            storageLocation: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            typeName: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            visibility: string;
                                                        }[];
                                                        id: number;
                                                        initialValue: {
                                                            arguments: {
                                                                commonType: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                leftExpression: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                nodeType: string;
                                                                operator: string;
                                                                rightExpression: {
                                                                    hexValue: string;
                                                                    id: number;
                                                                    isConstant: boolean;
                                                                    isLValue: boolean;
                                                                    isPure: boolean;
                                                                    kind: string;
                                                                    lValueRequested: boolean;
                                                                    nodeType: string;
                                                                    src: string;
                                                                    subdenomination: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                    value: string;
                                                                };
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            }[];
                                                            expression: {
                                                                argumentTypes: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                }[];
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                nodeType: string;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                                typeName: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    src: string;
                                                                    typeDescriptions: {};
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nameLocations: never[];
                                                            names: never[];
                                                            nodeType: string;
                                                            src: string;
                                                            tryCall: boolean;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        nodeType: string;
                                                        src: string;
                                                        expression?: undefined;
                                                    } | {
                                                        expression: {
                                                            arguments: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            }[];
                                                            expression: {
                                                                argumentTypes: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                }[];
                                                                expression: {
                                                                    arguments: {
                                                                        baseExpression: {
                                                                            id: number;
                                                                            name: string;
                                                                            nodeType: string;
                                                                            overloadedDeclarations: never[];
                                                                            referencedDeclaration: number;
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        id: number;
                                                                        indexExpression: {
                                                                            id: number;
                                                                            name: string;
                                                                            nodeType: string;
                                                                            overloadedDeclarations: never[];
                                                                            referencedDeclaration: number;
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        isConstant: boolean;
                                                                        isLValue: boolean;
                                                                        isPure: boolean;
                                                                        lValueRequested: boolean;
                                                                        nodeType: string;
                                                                        src: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                    }[];
                                                                    expression: {
                                                                        argumentTypes: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        }[];
                                                                        id: number;
                                                                        name: string;
                                                                        nodeType: string;
                                                                        overloadedDeclarations: never[];
                                                                        referencedDeclaration: number;
                                                                        src: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                    };
                                                                    id: number;
                                                                    isConstant: boolean;
                                                                    isLValue: boolean;
                                                                    isPure: boolean;
                                                                    kind: string;
                                                                    lValueRequested: boolean;
                                                                    nameLocations: never[];
                                                                    names: never[];
                                                                    nodeType: string;
                                                                    src: string;
                                                                    tryCall: boolean;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                memberLocation: string;
                                                                memberName: string;
                                                                nodeType: string;
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nameLocations: never[];
                                                            names: never[];
                                                            nodeType: string;
                                                            src: string;
                                                            tryCall: boolean;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        assignments?: undefined;
                                                        declarations?: undefined;
                                                        initialValue?: undefined;
                                                    } | {
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        assignments?: undefined;
                                                        declarations?: undefined;
                                                        initialValue?: undefined;
                                                        expression?: undefined;
                                                    })[];
                                                };
                                            }[];
                                        };
                                        errorName: string;
                                        id: number;
                                        nodeType: string;
                                        parameters: {
                                            id: number;
                                            nodeType: string;
                                            parameters: {
                                                constant: boolean;
                                                id: number;
                                                mutability: string;
                                                name: string;
                                                nameLocation: string;
                                                nodeType: string;
                                                scope: number;
                                                src: string;
                                                stateVariable: boolean;
                                                storageLocation: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                visibility: string;
                                            }[];
                                            src: string;
                                        };
                                        src: string;
                                    } | {
                                        block: {
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            statements: never[];
                                        };
                                        errorName: string;
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        parameters?: undefined;
                                    })[];
                                    externalCall: {
                                        arguments: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            expression: {
                                                arguments: {
                                                    baseExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    indexExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            initializationExpression: {
                                assignments: number[];
                                declarations: {
                                    constant: boolean;
                                    id: number;
                                    mutability: string;
                                    name: string;
                                    nameLocation: string;
                                    nodeType: string;
                                    scope: number;
                                    src: string;
                                    stateVariable: boolean;
                                    storageLocation: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    typeName: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    visibility: string;
                                }[];
                                id: number;
                                initialValue: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                nodeType: string;
                                src: string;
                            };
                            isSimpleCounterLoop: boolean;
                            loopExpression: {
                                expression: {
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                functionReturnParameters: number;
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            body?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    baseType: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: never[];
                                expression: {
                                    argumentTypes: never[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            body?: undefined;
                            initializationExpression?: undefined;
                            isSimpleCounterLoop?: undefined;
                            loopExpression?: undefined;
                        } | {
                            body: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    clauses: ({
                                        block: {
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            statements: {
                                                condition: {
                                                    commonType: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    leftExpression: {
                                                        commonType: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        leftExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        nodeType: string;
                                                        operator: string;
                                                        rightExpression: {
                                                            hexValue: string;
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            value: string;
                                                        };
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    operator: string;
                                                    rightExpression: {
                                                        commonType: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        leftExpression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        nodeType: string;
                                                        operator: string;
                                                        rightExpression: {
                                                            expression: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            lValueRequested: boolean;
                                                            memberLocation: string;
                                                            memberName: string;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                trueBody: {
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    statements: ({
                                                        assignments: number[];
                                                        declarations: {
                                                            constant: boolean;
                                                            id: number;
                                                            mutability: string;
                                                            name: string;
                                                            nameLocation: string;
                                                            nodeType: string;
                                                            scope: number;
                                                            src: string;
                                                            stateVariable: boolean;
                                                            storageLocation: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                            typeName: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            visibility: string;
                                                        }[];
                                                        id: number;
                                                        initialValue: {
                                                            arguments: {
                                                                expression: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                memberLocation: string;
                                                                memberName: string;
                                                                nodeType: string;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            }[];
                                                            expression: {
                                                                argumentTypes: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                }[];
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                nodeType: string;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                                typeName: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    src: string;
                                                                    typeDescriptions: {};
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nameLocations: never[];
                                                            names: never[];
                                                            nodeType: string;
                                                            src: string;
                                                            tryCall: boolean;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        nodeType: string;
                                                        src: string;
                                                        expression?: undefined;
                                                    } | {
                                                        expression: {
                                                            arguments: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            }[];
                                                            expression: {
                                                                argumentTypes: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                }[];
                                                                expression: {
                                                                    arguments: {
                                                                        baseExpression: {
                                                                            id: number;
                                                                            name: string;
                                                                            nodeType: string;
                                                                            overloadedDeclarations: never[];
                                                                            referencedDeclaration: number;
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        id: number;
                                                                        indexExpression: {
                                                                            id: number;
                                                                            name: string;
                                                                            nodeType: string;
                                                                            overloadedDeclarations: never[];
                                                                            referencedDeclaration: number;
                                                                            src: string;
                                                                            typeDescriptions: {
                                                                                typeIdentifier: string;
                                                                                typeString: string;
                                                                            };
                                                                        };
                                                                        isConstant: boolean;
                                                                        isLValue: boolean;
                                                                        isPure: boolean;
                                                                        lValueRequested: boolean;
                                                                        nodeType: string;
                                                                        src: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                    }[];
                                                                    expression: {
                                                                        argumentTypes: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        }[];
                                                                        id: number;
                                                                        name: string;
                                                                        nodeType: string;
                                                                        overloadedDeclarations: never[];
                                                                        referencedDeclaration: number;
                                                                        src: string;
                                                                        typeDescriptions: {
                                                                            typeIdentifier: string;
                                                                            typeString: string;
                                                                        };
                                                                    };
                                                                    id: number;
                                                                    isConstant: boolean;
                                                                    isLValue: boolean;
                                                                    isPure: boolean;
                                                                    kind: string;
                                                                    lValueRequested: boolean;
                                                                    nameLocations: never[];
                                                                    names: never[];
                                                                    nodeType: string;
                                                                    src: string;
                                                                    tryCall: boolean;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                memberLocation: string;
                                                                memberName: string;
                                                                nodeType: string;
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nameLocations: never[];
                                                            names: never[];
                                                            nodeType: string;
                                                            src: string;
                                                            tryCall: boolean;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        assignments?: undefined;
                                                        declarations?: undefined;
                                                        initialValue?: undefined;
                                                    } | {
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        assignments?: undefined;
                                                        declarations?: undefined;
                                                        initialValue?: undefined;
                                                        expression?: undefined;
                                                    })[];
                                                };
                                            }[];
                                        };
                                        errorName: string;
                                        id: number;
                                        nodeType: string;
                                        parameters: {
                                            id: number;
                                            nodeType: string;
                                            parameters: {
                                                constant: boolean;
                                                id: number;
                                                mutability: string;
                                                name: string;
                                                nameLocation: string;
                                                nodeType: string;
                                                scope: number;
                                                src: string;
                                                stateVariable: boolean;
                                                storageLocation: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                visibility: string;
                                            }[];
                                            src: string;
                                        };
                                        src: string;
                                    } | {
                                        block: {
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            statements: never[];
                                        };
                                        errorName: string;
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        parameters?: undefined;
                                    })[];
                                    externalCall: {
                                        arguments: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            expression: {
                                                arguments: {
                                                    baseExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    indexExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            initializationExpression: {
                                assignments: number[];
                                declarations: {
                                    constant: boolean;
                                    id: number;
                                    mutability: string;
                                    name: string;
                                    nameLocation: string;
                                    nodeType: string;
                                    scope: number;
                                    src: string;
                                    stateVariable: boolean;
                                    storageLocation: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    typeName: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    visibility: string;
                                }[];
                                id: number;
                                initialValue: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                nodeType: string;
                                src: string;
                            };
                            isSimpleCounterLoop: boolean;
                            loopExpression: {
                                expression: {
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            nodeType: string;
                            src: string;
                            trueBody?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    errorSelector?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                })[];
                abstract: boolean;
                baseContracts: {
                    baseName: {
                        id: number;
                        name: string;
                        nameLocations: string[];
                        nodeType: string;
                        referencedDeclaration: number;
                        src: string;
                    };
                    id: number;
                    nodeType: string;
                    src: string;
                }[];
                canonicalName: string;
                contractDependencies: never[];
                contractKind: string;
                fullyImplemented: boolean;
                linearizedBaseContracts: number[];
                name: string;
                nameLocation: string;
                scope: number;
                usedErrors: number[];
                usedEvents: number[];
                literals?: undefined;
                absolutePath?: undefined;
                file?: undefined;
                sourceUnit?: undefined;
                symbolAliases?: undefined;
                unitAlias?: undefined;
            })[];
            license: string;
        };
        id: number;
    };
    readonly SocialRecoveryModule: {
        abi: ({
            type: string;
            inputs: {
                name: string;
                type: string;
                internalType: string;
            }[];
            stateMutability: string;
            name?: undefined;
            outputs?: undefined;
            anonymous?: undefined;
        } | {
            type: string;
            name: string;
            inputs: {
                name: string;
                type: string;
                internalType: string;
            }[];
            outputs: {
                name: string;
                type: string;
                internalType: string;
            }[];
            stateMutability: string;
            anonymous?: undefined;
        } | {
            type: string;
            name: string;
            inputs: {
                name: string;
                type: string;
                indexed: boolean;
                internalType: string;
            }[];
            anonymous: boolean;
            stateMutability?: undefined;
            outputs?: undefined;
        })[];
        bytecode: {
            object: string;
            sourceMap: string;
            linkReferences: {};
        };
        deployedBytecode: {
            object: string;
            sourceMap: string;
            linkReferences: {};
        };
        methodIdentifiers: {
            "GUARDIAN_ADDITION_DELAY()": string;
            "RECOVERY_TIMELOCK()": string;
            "account()": string;
            "activateGuardian(address)": string;
            "activeRecovery()": string;
            "addGuardian(address)": string;
            "cancelRecovery()": string;
            "executeRecovery()": string;
            "getRecoveryRequest()": string;
            "guardianCount()": string;
            "guardians(address)": string;
            "hasApproved(address,uint256)": string;
            "initiateRecovery(address)": string;
            "isGuardian(address)": string;
            "postExecute(address,address,uint256,bytes,bytes)": string;
            "preExecute(address,address,uint256,bytes)": string;
            "proposeGuardian(address)": string;
            "recoveryNonce()": string;
            "removeGuardian(address)": string;
            "setThreshold(uint256)": string;
            "supportRecovery()": string;
            "threshold()": string;
        };
        rawMetadata: string;
        metadata: {
            compiler: {
                version: string;
            };
            language: string;
            output: {
                abi: ({
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    stateMutability: string;
                    type: string;
                    name?: undefined;
                    anonymous?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                        indexed: boolean;
                    }[];
                    type: string;
                    name: string;
                    anonymous: boolean;
                    stateMutability?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    stateMutability: string;
                    type: string;
                    name: string;
                    anonymous?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    stateMutability: string;
                    type: string;
                    name: string;
                    outputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    anonymous?: undefined;
                })[];
                devdoc: {
                    kind: string;
                    methods: {
                        "activateGuardian(address)": {
                            params: {
                                guardian: string;
                            };
                        };
                        "addGuardian(address)": {
                            params: {
                                guardian: string;
                            };
                        };
                        "initiateRecovery(address)": {
                            params: {
                                newOwner: string;
                            };
                        };
                        "proposeGuardian(address)": {
                            params: {
                                guardian: string;
                            };
                        };
                        "removeGuardian(address)": {
                            params: {
                                guardian: string;
                            };
                        };
                        "setThreshold(uint256)": {
                            params: {
                                _threshold: string;
                            };
                        };
                    };
                    version: number;
                };
                userdoc: {
                    kind: string;
                    methods: {
                        "activateGuardian(address)": {
                            notice: string;
                        };
                        "addGuardian(address)": {
                            notice: string;
                        };
                        "cancelRecovery()": {
                            notice: string;
                        };
                        "executeRecovery()": {
                            notice: string;
                        };
                        "getRecoveryRequest()": {
                            notice: string;
                        };
                        "initiateRecovery(address)": {
                            notice: string;
                        };
                        "isGuardian(address)": {
                            notice: string;
                        };
                        "proposeGuardian(address)": {
                            notice: string;
                        };
                        "removeGuardian(address)": {
                            notice: string;
                        };
                        "setThreshold(uint256)": {
                            notice: string;
                        };
                        "supportRecovery()": {
                            notice: string;
                        };
                    };
                    version: number;
                };
            };
            settings: {
                remappings: string[];
                optimizer: {
                    enabled: boolean;
                    runs: number;
                };
                metadata: {
                    bytecodeHash: string;
                };
                compilationTarget: {
                    "src/modules/SocialRecoveryModule.sol": string;
                };
                evmVersion: string;
                libraries: {};
                viaIR: boolean;
            };
            sources: {
                "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/SmartAccount.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/interfaces/IAccount.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/interfaces/IERC1271.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/interfaces/IEntryPoint.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/modules/IModule.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/modules/ModuleManagerOptimized.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/modules/SocialRecoveryModule.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/modules/SpendingLimitModule.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/validators/ISignatureValidator.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/validators/SessionKeyValidator.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/validators/ValidatorManager.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
            };
            version: number;
        };
        ast: {
            absolutePath: string;
            id: number;
            exportedSymbols: {
                ECDSA: number[];
                IAccount: number[];
                IERC1271: number[];
                IModule: number[];
                ISessionKeyExpiry: number[];
                ISignatureValidator: number[];
                MessageHashUtils: number[];
                ModuleManagerOptimized: number[];
                ReentrancyGuard: number[];
                SessionKeyValidator: number[];
                SmartAccount: number[];
                SocialRecoveryModule: number[];
                SpendingLimitExceeded: number[];
                SpendingLimitModule: number[];
                UserOperation: number[];
                ValidatorManager: number[];
            };
            nodeType: string;
            src: string;
            nodes: ({
                id: number;
                nodeType: string;
                src: string;
                nodes: never[];
                literals: string[];
                absolutePath?: undefined;
                file?: undefined;
                nameLocation?: undefined;
                scope?: undefined;
                sourceUnit?: undefined;
                symbolAliases?: undefined;
                unitAlias?: undefined;
                abstract?: undefined;
                baseContracts?: undefined;
                canonicalName?: undefined;
                contractDependencies?: undefined;
                contractKind?: undefined;
                documentation?: undefined;
                fullyImplemented?: undefined;
                linearizedBaseContracts?: undefined;
                name?: undefined;
                usedErrors?: undefined;
                usedEvents?: undefined;
            } | {
                id: number;
                nodeType: string;
                src: string;
                nodes: never[];
                absolutePath: string;
                file: string;
                nameLocation: string;
                scope: number;
                sourceUnit: number;
                symbolAliases: never[];
                unitAlias: string;
                literals?: undefined;
                abstract?: undefined;
                baseContracts?: undefined;
                canonicalName?: undefined;
                contractDependencies?: undefined;
                contractKind?: undefined;
                documentation?: undefined;
                fullyImplemented?: undefined;
                linearizedBaseContracts?: undefined;
                name?: undefined;
                usedErrors?: undefined;
                usedEvents?: undefined;
            } | {
                id: number;
                nodeType: string;
                src: string;
                nodes: ({
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    canonicalName: string;
                    members: ({
                        constant: boolean;
                        id: number;
                        mutability: string;
                        name: string;
                        nameLocation: string;
                        nodeType: string;
                        scope: number;
                        src: string;
                        stateVariable: boolean;
                        storageLocation: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        typeName: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            stateMutability: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        visibility: string;
                    } | {
                        constant: boolean;
                        id: number;
                        mutability: string;
                        name: string;
                        nameLocation: string;
                        nodeType: string;
                        scope: number;
                        src: string;
                        stateVariable: boolean;
                        storageLocation: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        typeName: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            stateMutability?: undefined;
                        };
                        visibility: string;
                    })[];
                    name: string;
                    nameLocation: string;
                    scope: number;
                    visibility: string;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        name: string;
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        stateMutability?: undefined;
                        keyName?: undefined;
                        keyNameLocation?: undefined;
                        keyType?: undefined;
                        valueName?: undefined;
                        valueNameLocation?: undefined;
                        valueType?: undefined;
                        pathNode?: undefined;
                        referencedDeclaration?: undefined;
                    };
                    value: {
                        hexValue: string;
                        id: number;
                        isConstant: boolean;
                        isLValue: boolean;
                        isPure: boolean;
                        kind: string;
                        lValueRequested: boolean;
                        nodeType: string;
                        src: string;
                        subdenomination: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        value: string;
                    };
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        name: string;
                        nodeType: string;
                        src: string;
                        stateMutability: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        keyName?: undefined;
                        keyNameLocation?: undefined;
                        keyType?: undefined;
                        valueName?: undefined;
                        valueNameLocation?: undefined;
                        valueType?: undefined;
                        pathNode?: undefined;
                        referencedDeclaration?: undefined;
                    };
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        keyName: string;
                        keyNameLocation: string;
                        keyType: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        valueName: string;
                        valueNameLocation: string;
                        valueType: {
                            id: number;
                            nodeType: string;
                            pathNode: {
                                id: number;
                                name: string;
                                nameLocations: string[];
                                nodeType: string;
                                referencedDeclaration: number;
                                src: string;
                            };
                            referencedDeclaration: number;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            keyName?: undefined;
                            keyNameLocation?: undefined;
                            keyType?: undefined;
                            valueName?: undefined;
                            valueNameLocation?: undefined;
                            valueType?: undefined;
                        };
                        name?: undefined;
                        stateMutability?: undefined;
                        pathNode?: undefined;
                        referencedDeclaration?: undefined;
                    };
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        keyName: string;
                        keyNameLocation: string;
                        keyType: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        valueName: string;
                        valueNameLocation: string;
                        valueType: {
                            id: number;
                            keyName: string;
                            keyNameLocation: string;
                            keyType: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            valueName: string;
                            valueNameLocation: string;
                            valueType: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            pathNode?: undefined;
                            referencedDeclaration?: undefined;
                        };
                        name?: undefined;
                        stateMutability?: undefined;
                        pathNode?: undefined;
                        referencedDeclaration?: undefined;
                    };
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        name: string;
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        stateMutability?: undefined;
                        keyName?: undefined;
                        keyNameLocation?: undefined;
                        keyType?: undefined;
                        valueName?: undefined;
                        valueNameLocation?: undefined;
                        valueType?: undefined;
                        pathNode?: undefined;
                        referencedDeclaration?: undefined;
                    };
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        nodeType: string;
                        pathNode: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        referencedDeclaration: number;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        name?: undefined;
                        stateMutability?: undefined;
                        keyName?: undefined;
                        keyNameLocation?: undefined;
                        keyType?: undefined;
                        valueName?: undefined;
                        valueNameLocation?: undefined;
                        valueType?: undefined;
                    };
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    anonymous: boolean;
                    eventSelector: string;
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            indexed: boolean;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            indexed: boolean;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    canonicalName?: undefined;
                    members?: undefined;
                    scope?: undefined;
                    visibility?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    scope?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                    referencedDeclaration?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    scope?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            arguments: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    scope?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            commonType: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            leftExpression: {
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            nodeType: string;
                                            operator: string;
                                            rightExpression: {
                                                hexValue: string;
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                value: string;
                                            };
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    scope?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        })[];
                    };
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                    referencedDeclaration?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        expression: {
                                            baseExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            indexExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    operator?: undefined;
                                    prefix?: undefined;
                                    subExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            expression: {
                                                baseExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                indexExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                operator: string;
                                prefix: boolean;
                                src: string;
                                subExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                leftHandSide?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            falseBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            commonType: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            leftExpression: {
                                                components: {
                                                    commonType: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    leftExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    operator: string;
                                                    rightExpression: {
                                                        hexValue: string;
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        value: string;
                                                    };
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isInlineArray: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            nodeType: string;
                                            operator: string;
                                            rightExpression: {
                                                hexValue: string;
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                value: string;
                                            };
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            expression?: undefined;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        expression: {
                                            baseExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            indexExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    operator?: undefined;
                                    prefix?: undefined;
                                    subExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    baseExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    arguments: ({
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                        expression?: undefined;
                                        memberLocation?: undefined;
                                        memberName?: undefined;
                                    } | {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        hexValue?: undefined;
                                        kind?: undefined;
                                        value?: undefined;
                                    })[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: string[];
                                    names: string[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                operator: string;
                                prefix: boolean;
                                src: string;
                                subExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                leftHandSide?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            falseBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            commonType: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            leftExpression: {
                                                components: {
                                                    commonType: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    leftExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    operator: string;
                                                    rightExpression: {
                                                        hexValue: string;
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        value: string;
                                                    };
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isInlineArray: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            nodeType: string;
                                            operator: string;
                                            rightExpression: {
                                                hexValue: string;
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                value: string;
                                            };
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            expression?: undefined;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                    referencedDeclaration?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                operator: string;
                                prefix: boolean;
                                src: string;
                                subExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                leftHandSide?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    eventCall?: undefined;
                                } | {
                                    eventCall: {
                                        arguments: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    expression?: undefined;
                                })[];
                            };
                            expression?: undefined;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                operator?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                                leftHandSide?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            commonType: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            leftExpression: {
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            nodeType: string;
                                            operator: string;
                                            rightExpression: {
                                                hexValue: string;
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                value: string;
                                            };
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                operator?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                                leftHandSide?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                operator: string;
                                prefix: boolean;
                                src: string;
                                subExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                leftHandSide?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    baseExpression?: undefined;
                                    indexExpression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    arguments: ({
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        hexValue?: undefined;
                                        isConstant?: undefined;
                                        isLValue?: undefined;
                                        isPure?: undefined;
                                        kind?: undefined;
                                        lValueRequested?: undefined;
                                        value?: undefined;
                                        expression?: undefined;
                                        memberLocation?: undefined;
                                        memberName?: undefined;
                                    } | {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                        name?: undefined;
                                        overloadedDeclarations?: undefined;
                                        referencedDeclaration?: undefined;
                                        expression?: undefined;
                                        memberLocation?: undefined;
                                        memberName?: undefined;
                                    } | {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        name?: undefined;
                                        overloadedDeclarations?: undefined;
                                        referencedDeclaration?: undefined;
                                        hexValue?: undefined;
                                        kind?: undefined;
                                        value?: undefined;
                                    })[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: string[];
                                    names: string[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    baseExpression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    arguments?: undefined;
                                    expression?: undefined;
                                    nameLocations?: undefined;
                                    names?: undefined;
                                    tryCall?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: ({
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                } | {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    operator?: undefined;
                                    prefix?: undefined;
                                    subExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        baseExpression: {
                                            baseExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            indexExpression: {
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    operator?: undefined;
                                    prefix?: undefined;
                                    subExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    baseExpression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                prefix?: undefined;
                                subExpression?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                operator: string;
                                prefix: boolean;
                                src: string;
                                subExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                leftHandSide?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: ({
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                } | {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    operator?: undefined;
                                    prefix?: undefined;
                                    subExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    stateMutability: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: never[];
                                expression: {
                                    argumentTypes: never[];
                                    expression: {
                                        arguments: {
                                            arguments: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    stateMutability: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                memberLocation?: undefined;
                                memberName?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            eventCall?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    stateMutability: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                expression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    argumentTypes?: undefined;
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                memberLocation: string;
                                memberName: string;
                                nodeType: string;
                                referencedDeclaration: number;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    arguments?: undefined;
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    nameLocations?: undefined;
                                    names?: undefined;
                                    tryCall?: undefined;
                                } | {
                                    arguments: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {};
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    expression: {
                                        arguments: {
                                            arguments: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    stateMutability: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    operator: string;
                                    prefix: boolean;
                                    src: string;
                                    subExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    operator?: undefined;
                                    prefix?: undefined;
                                    subExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: {
                            expression: {
                                expression: {
                                    baseExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                memberLocation: string;
                                memberName: string;
                                nodeType: string;
                                referencedDeclaration: number;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                        }[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            commonType: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            leftExpression: {
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                operator: string;
                                                prefix: boolean;
                                                src: string;
                                                subExpression: {
                                                    expression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            nodeType: string;
                                            operator: string;
                                            rightExpression: {
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                operator: string;
                                                prefix: boolean;
                                                src: string;
                                                subExpression: {
                                                    expression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            commonType: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            leftExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            nodeType: string;
                                            operator: string;
                                            rightExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            commonType: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            leftExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            nodeType: string;
                                            operator: string;
                                            rightExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: {
                            expression: {
                                hexValue: string;
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                value: string;
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                        }[];
                    };
                    baseFunctions: number[];
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    overrides: {
                        id: number;
                        nodeType: string;
                        overrides: never[];
                        src: string;
                    };
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    value?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    documentation?: undefined;
                })[];
                abstract: boolean;
                baseContracts: {
                    baseName: {
                        id: number;
                        name: string;
                        nameLocations: string[];
                        nodeType: string;
                        referencedDeclaration: number;
                        src: string;
                    };
                    id: number;
                    nodeType: string;
                    src: string;
                }[];
                canonicalName: string;
                contractDependencies: never[];
                contractKind: string;
                documentation: {
                    id: number;
                    nodeType: string;
                    src: string;
                    text: string;
                };
                fullyImplemented: boolean;
                linearizedBaseContracts: number[];
                name: string;
                nameLocation: string;
                scope: number;
                usedErrors: never[];
                usedEvents: number[];
                literals?: undefined;
                absolutePath?: undefined;
                file?: undefined;
                sourceUnit?: undefined;
                symbolAliases?: undefined;
                unitAlias?: undefined;
            })[];
            license: string;
        };
        id: number;
    };
    readonly SessionKeyValidator: {
        abi: ({
            type: string;
            inputs: {
                name: string;
                type: string;
                internalType: string;
            }[];
            stateMutability: string;
            name?: undefined;
            outputs?: undefined;
            anonymous?: undefined;
        } | {
            type: string;
            name: string;
            inputs: {
                name: string;
                type: string;
                internalType: string;
            }[];
            outputs: {
                name: string;
                type: string;
                internalType: string;
            }[];
            stateMutability: string;
            anonymous?: undefined;
        } | {
            type: string;
            name: string;
            inputs: {
                name: string;
                type: string;
                indexed: boolean;
                internalType: string;
            }[];
            anonymous: boolean;
            stateMutability?: undefined;
            outputs?: undefined;
        })[];
        bytecode: {
            object: string;
            sourceMap: string;
            linkReferences: {};
        };
        deployedBytecode: {
            object: string;
            sourceMap: string;
            linkReferences: {};
            immutableReferences: {
                "51075": {
                    start: number;
                    length: number;
                }[];
            };
        };
        methodIdentifiers: {
            "account()": string;
            "allowSelector(address,bytes4,bool)": string;
            "allowTarget(address,address,bool)": string;
            "consumeOrRevert(address,uint256,uint48)": string;
            "getSpendingStatus(address,uint48)": string;
            "getWindowId(uint48)": string;
            "grant(address,uint64)": string;
            "isTargetAllowed(address,address)": string;
            "isValidUserOp(bytes,bytes32)": string;
            "recordSpending(address,uint256,uint48)": string;
            "revoke(address)": string;
            "selectorAllowed(address,bytes4)": string;
            "sessionExpiry(address)": string;
            "sessionKeyData(address)": string;
            "setSpendingCap(address,uint256)": string;
            "setTargetRestrictions(address,bool)": string;
            "targetAllowed(address,address)": string;
            "windowSpending(address,uint256)": string;
            "wouldExceedCap(address,uint256,uint48)": string;
        };
        rawMetadata: string;
        metadata: {
            compiler: {
                version: string;
            };
            language: string;
            output: {
                abi: ({
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    stateMutability: string;
                    type: string;
                    name?: undefined;
                    anonymous?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                        indexed: boolean;
                    }[];
                    type: string;
                    name: string;
                    anonymous: boolean;
                    stateMutability?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    stateMutability: string;
                    type: string;
                    name: string;
                    anonymous?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    stateMutability: string;
                    type: string;
                    name: string;
                    outputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    anonymous?: undefined;
                })[];
                devdoc: {
                    kind: string;
                    methods: {
                        "allowTarget(address,address,bool)": {
                            params: {
                                allowed: string;
                                key: string;
                                target: string;
                            };
                        };
                        "consumeOrRevert(address,uint256,uint48)": {
                            details: string;
                            params: {
                                amount: string;
                                key: string;
                                timestamp: string;
                            };
                        };
                        "getSpendingStatus(address,uint48)": {
                            params: {
                                key: string;
                                timestamp: string;
                            };
                            returns: {
                                cap: string;
                                remaining: string;
                                spent: string;
                            };
                        };
                        "getWindowId(uint48)": {
                            params: {
                                timestamp: string;
                            };
                            returns: {
                                _0: string;
                            };
                        };
                        "isTargetAllowed(address,address)": {
                            params: {
                                key: string;
                                target: string;
                            };
                            returns: {
                                allowed: string;
                            };
                        };
                        "recordSpending(address,uint256,uint48)": {
                            details: string;
                            params: {
                                amount: string;
                                key: string;
                                timestamp: string;
                            };
                        };
                        "setSpendingCap(address,uint256)": {
                            params: {
                                dailyCap: string;
                                key: string;
                            };
                        };
                        "setTargetRestrictions(address,bool)": {
                            params: {
                                enabled: string;
                                key: string;
                            };
                        };
                        "wouldExceedCap(address,uint256,uint48)": {
                            params: {
                                amount: string;
                                key: string;
                                timestamp: string;
                            };
                            returns: {
                                wouldExceed: string;
                            };
                        };
                    };
                    version: number;
                };
                userdoc: {
                    kind: string;
                    methods: {
                        "allowTarget(address,address,bool)": {
                            notice: string;
                        };
                        "consumeOrRevert(address,uint256,uint48)": {
                            notice: string;
                        };
                        "getSpendingStatus(address,uint48)": {
                            notice: string;
                        };
                        "getWindowId(uint48)": {
                            notice: string;
                        };
                        "isTargetAllowed(address,address)": {
                            notice: string;
                        };
                        "recordSpending(address,uint256,uint48)": {
                            notice: string;
                        };
                        "setSpendingCap(address,uint256)": {
                            notice: string;
                        };
                        "setTargetRestrictions(address,bool)": {
                            notice: string;
                        };
                        "wouldExceedCap(address,uint256,uint48)": {
                            notice: string;
                        };
                    };
                    version: number;
                };
            };
            settings: {
                remappings: string[];
                optimizer: {
                    enabled: boolean;
                    runs: number;
                };
                metadata: {
                    bytecodeHash: string;
                };
                compilationTarget: {
                    "src/validators/SessionKeyValidator.sol": string;
                };
                evmVersion: string;
                libraries: {};
                viaIR: boolean;
            };
            sources: {
                "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/validators/ISignatureValidator.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/validators/SessionKeyValidator.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
            };
            version: number;
        };
        ast: {
            absolutePath: string;
            id: number;
            exportedSymbols: {
                ECDSA: number[];
                ISignatureValidator: number[];
                MessageHashUtils: number[];
                SessionKeyValidator: number[];
            };
            nodeType: string;
            src: string;
            nodes: ({
                id: number;
                nodeType: string;
                src: string;
                nodes: never[];
                literals: string[];
                absolutePath?: undefined;
                file?: undefined;
                nameLocation?: undefined;
                scope?: undefined;
                sourceUnit?: undefined;
                symbolAliases?: undefined;
                unitAlias?: undefined;
                abstract?: undefined;
                baseContracts?: undefined;
                canonicalName?: undefined;
                contractDependencies?: undefined;
                contractKind?: undefined;
                fullyImplemented?: undefined;
                linearizedBaseContracts?: undefined;
                name?: undefined;
                usedErrors?: undefined;
                usedEvents?: undefined;
            } | {
                id: number;
                nodeType: string;
                src: string;
                nodes: never[];
                absolutePath: string;
                file: string;
                nameLocation: string;
                scope: number;
                sourceUnit: number;
                symbolAliases: {
                    foreign: {
                        id: number;
                        name: string;
                        nodeType: string;
                        overloadedDeclarations: never[];
                        referencedDeclaration: number;
                        src: string;
                        typeDescriptions: {};
                    };
                    nameLocation: string;
                }[];
                unitAlias: string;
                literals?: undefined;
                abstract?: undefined;
                baseContracts?: undefined;
                canonicalName?: undefined;
                contractDependencies?: undefined;
                contractKind?: undefined;
                fullyImplemented?: undefined;
                linearizedBaseContracts?: undefined;
                name?: undefined;
                usedErrors?: undefined;
                usedEvents?: undefined;
            } | {
                id: number;
                nodeType: string;
                src: string;
                nodes: ({
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    global: boolean;
                    libraryName: {
                        id: number;
                        name: string;
                        nameLocations: string[];
                        nodeType: string;
                        referencedDeclaration: number;
                        src: string;
                    };
                    typeName: {
                        id: number;
                        name: string;
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        stateMutability?: undefined;
                        keyName?: undefined;
                        keyNameLocation?: undefined;
                        keyType?: undefined;
                        valueName?: undefined;
                        valueNameLocation?: undefined;
                        valueType?: undefined;
                    };
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    name?: undefined;
                    nameLocation?: undefined;
                    scope?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    visibility?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        name: string;
                        nodeType: string;
                        src: string;
                        stateMutability: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        keyName?: undefined;
                        keyNameLocation?: undefined;
                        keyType?: undefined;
                        valueName?: undefined;
                        valueNameLocation?: undefined;
                        valueType?: undefined;
                    };
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        keyName: string;
                        keyNameLocation: string;
                        keyType: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        valueName: string;
                        valueNameLocation: string;
                        valueType: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            keyName?: undefined;
                            keyNameLocation?: undefined;
                            keyType?: undefined;
                            valueName?: undefined;
                            valueNameLocation?: undefined;
                            valueType?: undefined;
                            pathNode?: undefined;
                            referencedDeclaration?: undefined;
                        };
                        name?: undefined;
                        stateMutability?: undefined;
                    };
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        keyName: string;
                        keyNameLocation: string;
                        keyType: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        valueName: string;
                        valueNameLocation: string;
                        valueType: {
                            id: number;
                            keyName: string;
                            keyNameLocation: string;
                            keyType: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            valueName: string;
                            valueNameLocation: string;
                            valueType: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            name?: undefined;
                            pathNode?: undefined;
                            referencedDeclaration?: undefined;
                        };
                        name?: undefined;
                        stateMutability?: undefined;
                    };
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    canonicalName: string;
                    members: {
                        constant: boolean;
                        id: number;
                        mutability: string;
                        name: string;
                        nameLocation: string;
                        nodeType: string;
                        scope: number;
                        src: string;
                        stateVariable: boolean;
                        storageLocation: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        typeName: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        visibility: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    scope: number;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        keyName: string;
                        keyNameLocation: string;
                        keyType: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        valueName: string;
                        valueNameLocation: string;
                        valueType: {
                            id: number;
                            nodeType: string;
                            pathNode: {
                                id: number;
                                name: string;
                                nameLocations: string[];
                                nodeType: string;
                                referencedDeclaration: number;
                                src: string;
                            };
                            referencedDeclaration: number;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            name?: undefined;
                            keyName?: undefined;
                            keyNameLocation?: undefined;
                            keyType?: undefined;
                            valueName?: undefined;
                            valueNameLocation?: undefined;
                            valueType?: undefined;
                        };
                        name?: undefined;
                        stateMutability?: undefined;
                    };
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    anonymous: boolean;
                    eventSelector: string;
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            indexed: boolean;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            indexed: boolean;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    scope?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    visibility?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    scope?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        })[];
                    };
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    baseExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                operator: string;
                                prefix: boolean;
                                src: string;
                                subExpression: {
                                    baseExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    baseExpression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            assignments: (number | null)[];
                            declarations: ({
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    stateMutability: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    pathNode?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                visibility: string;
                            } | {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    stateMutability?: undefined;
                                };
                                visibility: string;
                            } | null)[];
                            id: number;
                            initialValue: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    expression: {
                                        arguments: never[];
                                        expression: {
                                            argumentTypes: never[];
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                baseExpression?: undefined;
                                indexExpression?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                expression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                functionReturnParameters: number;
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                baseExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                indexExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    baseFunctions: number[];
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    overrides: {
                        id: number;
                        nodeType: string;
                        overrides: never[];
                        src: string;
                    };
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    baseExpression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: {
                            expression: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    arguments: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {};
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    subdenomination: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                        }[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                baseExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    baseExpression?: undefined;
                                    indexExpression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                };
                                id: number;
                                indexExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                expression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                functionReturnParameters: number;
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                baseExpression?: undefined;
                                indexExpression?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                baseExpression: {
                                    baseExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                id: number;
                                indexExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    components: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    }[];
                                    id: number;
                                    isConstant: boolean;
                                    isInlineArray: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                baseExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                indexExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                operator: string;
                                prefix: boolean;
                                src: string;
                                subExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                expression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                functionReturnParameters: number;
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                baseExpression: {
                                    baseExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                indexExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                baseExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    baseExpression?: undefined;
                                    indexExpression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                };
                                id: number;
                                indexExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                commonType?: undefined;
                                leftExpression?: undefined;
                                operator?: undefined;
                                rightExpression?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                functionReturnParameters: number;
                                id: number;
                                nodeType: string;
                                src: string;
                                statements?: undefined;
                            };
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                baseExpression?: undefined;
                                indexExpression?: undefined;
                                commonType?: undefined;
                                leftExpression?: undefined;
                                operator?: undefined;
                                rightExpression?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                baseExpression: {
                                    baseExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                id: number;
                                indexExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                                commonType?: undefined;
                                leftExpression?: undefined;
                                operator?: undefined;
                                rightExpression?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                baseExpression?: undefined;
                                indexExpression?: undefined;
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    eventCall: {
                                        arguments: ({
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            expression?: undefined;
                                            isConstant?: undefined;
                                            isLValue?: undefined;
                                            isPure?: undefined;
                                            lValueRequested?: undefined;
                                            memberLocation?: undefined;
                                            memberName?: undefined;
                                        } | {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            name?: undefined;
                                            overloadedDeclarations?: undefined;
                                        })[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    expression?: undefined;
                                } | {
                                    expression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: number[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    eventCall?: undefined;
                                })[];
                                functionReturnParameters?: undefined;
                            };
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    baseExpression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    baseExpression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: ({
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    baseExpression?: undefined;
                                    indexExpression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                } | {
                                    baseExpression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                baseExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                indexExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    baseExpression?: undefined;
                                    indexExpression?: undefined;
                                    condition?: undefined;
                                    falseExpression?: undefined;
                                    trueExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                baseExpression?: undefined;
                                indexExpression?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    baseExpression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                    referencedDeclaration?: undefined;
                                    condition?: undefined;
                                    falseExpression?: undefined;
                                    trueExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    condition: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    falseExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    trueExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                    referencedDeclaration?: undefined;
                                    baseExpression?: undefined;
                                    indexExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    global?: undefined;
                    libraryName?: undefined;
                    typeName?: undefined;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                })[];
                abstract: boolean;
                baseContracts: {
                    baseName: {
                        id: number;
                        name: string;
                        nameLocations: string[];
                        nodeType: string;
                        referencedDeclaration: number;
                        src: string;
                    };
                    id: number;
                    nodeType: string;
                    src: string;
                }[];
                canonicalName: string;
                contractDependencies: never[];
                contractKind: string;
                fullyImplemented: boolean;
                linearizedBaseContracts: number[];
                name: string;
                nameLocation: string;
                scope: number;
                usedErrors: never[];
                usedEvents: number[];
                literals?: undefined;
                absolutePath?: undefined;
                file?: undefined;
                sourceUnit?: undefined;
                symbolAliases?: undefined;
                unitAlias?: undefined;
            })[];
            license: string;
        };
        id: number;
    };
    readonly SpendingLimitModule: {
        abi: ({
            type: string;
            inputs: {
                name: string;
                type: string;
                internalType: string;
            }[];
            stateMutability: string;
            name?: undefined;
            outputs?: undefined;
            anonymous?: undefined;
        } | {
            type: string;
            name: string;
            inputs: {
                name: string;
                type: string;
                internalType: string;
            }[];
            outputs: {
                name: string;
                type: string;
                internalType: string;
            }[];
            stateMutability: string;
            anonymous?: undefined;
        } | {
            type: string;
            name: string;
            inputs: {
                name: string;
                type: string;
                indexed: boolean;
                internalType: string;
            }[];
            anonymous: boolean;
            stateMutability?: undefined;
            outputs?: undefined;
        } | {
            type: string;
            name: string;
            inputs: never[];
            stateMutability?: undefined;
            outputs?: undefined;
            anonymous?: undefined;
        })[];
        bytecode: {
            object: string;
            sourceMap: string;
            linkReferences: {};
        };
        deployedBytecode: {
            object: string;
            sourceMap: string;
            linkReferences: {};
            immutableReferences: {
                "50116": {
                    start: number;
                    length: number;
                }[];
            };
        };
        methodIdentifiers: {
            "account()": string;
            "bypassEnabledUntil()": string;
            "disableOwnerBypass()": string;
            "enableOwnerBypass(uint256)": string;
            "getEthLimit()": string;
            "isBypassActive()": string;
            "limits(address)": string;
            "ownerBypassEnabled()": string;
            "postExecute(address,address,uint256,bytes,bytes)": string;
            "preExecute(address,address,uint256,bytes)": string;
            "preExecuteBatch(address,uint256)": string;
            "removeEthLimit()": string;
            "setEthLimit(uint256)": string;
            "setLimit(address,uint256)": string;
            "setLimitWithDecimals(address,uint256,uint8)": string;
            "wouldExceedEthLimit(uint256)": string;
        };
        rawMetadata: string;
        metadata: {
            compiler: {
                version: string;
            };
            language: string;
            output: {
                abi: ({
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    stateMutability: string;
                    type: string;
                    name?: undefined;
                    anonymous?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: never[];
                    type: string;
                    name: string;
                    stateMutability?: undefined;
                    anonymous?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                        indexed: boolean;
                    }[];
                    type: string;
                    name: string;
                    anonymous: boolean;
                    stateMutability?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    stateMutability: string;
                    type: string;
                    name: string;
                    anonymous?: undefined;
                    outputs?: undefined;
                } | {
                    inputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    stateMutability: string;
                    type: string;
                    name: string;
                    outputs: {
                        internalType: string;
                        name: string;
                        type: string;
                    }[];
                    anonymous?: undefined;
                })[];
                devdoc: {
                    kind: string;
                    methods: {
                        "enableOwnerBypass(uint256)": {
                            params: {
                                duration: string;
                            };
                        };
                        "getEthLimit()": {
                            returns: {
                                cap: string;
                                remaining: string;
                                resetsAt: string;
                                spent: string;
                            };
                        };
                        "preExecute(address,address,uint256,bytes)": {
                            params: {
                                caller: string;
                                data: string;
                                target: string;
                                value: string;
                            };
                            returns: {
                                _0: string;
                            };
                        };
                        "preExecuteBatch(address,uint256)": {
                            details: string;
                            params: {
                                caller: string;
                                totalEthValue: string;
                            };
                        };
                        "removeEthLimit()": {
                            details: string;
                        };
                        "setEthLimit(uint256)": {
                            details: string;
                            params: {
                                cap: string;
                            };
                        };
                        "setLimitWithDecimals(address,uint256,uint8)": {
                            params: {
                                cap: string;
                                decimals: string;
                                token: string;
                            };
                        };
                        "wouldExceedEthLimit(uint256)": {
                            params: {
                                amount: string;
                            };
                            returns: {
                                wouldExceed: string;
                            };
                        };
                    };
                    version: number;
                };
                userdoc: {
                    kind: string;
                    methods: {
                        "disableOwnerBypass()": {
                            notice: string;
                        };
                        "enableOwnerBypass(uint256)": {
                            notice: string;
                        };
                        "getEthLimit()": {
                            notice: string;
                        };
                        "isBypassActive()": {
                            notice: string;
                        };
                        "preExecute(address,address,uint256,bytes)": {
                            notice: string;
                        };
                        "preExecuteBatch(address,uint256)": {
                            notice: string;
                        };
                        "removeEthLimit()": {
                            notice: string;
                        };
                        "setEthLimit(uint256)": {
                            notice: string;
                        };
                        "setLimitWithDecimals(address,uint256,uint8)": {
                            notice: string;
                        };
                        "wouldExceedEthLimit(uint256)": {
                            notice: string;
                        };
                    };
                    version: number;
                };
            };
            settings: {
                remappings: string[];
                optimizer: {
                    enabled: boolean;
                    runs: number;
                };
                metadata: {
                    bytecodeHash: string;
                };
                compilationTarget: {
                    "src/modules/SpendingLimitModule.sol": string;
                };
                evmVersion: string;
                libraries: {};
                viaIR: boolean;
            };
            sources: {
                "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/SmartAccount.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/interfaces/IAccount.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/interfaces/IERC1271.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/interfaces/IEntryPoint.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/modules/IModule.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/modules/ModuleManagerOptimized.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/modules/SpendingLimitModule.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/validators/ISignatureValidator.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/validators/SessionKeyValidator.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
                "src/validators/ValidatorManager.sol": {
                    keccak256: string;
                    urls: string[];
                    license: string;
                };
            };
            version: number;
        };
        ast: {
            absolutePath: string;
            id: number;
            exportedSymbols: {
                IERC20Like: number[];
                IModule: number[];
                SmartAccount: number[];
                SpendingLimitExceeded: number[];
                SpendingLimitModule: number[];
            };
            nodeType: string;
            src: string;
            nodes: ({
                id: number;
                nodeType: string;
                src: string;
                nodes: never[];
                literals: string[];
                absolutePath?: undefined;
                file?: undefined;
                nameLocation?: undefined;
                scope?: undefined;
                sourceUnit?: undefined;
                symbolAliases?: undefined;
                unitAlias?: undefined;
                errorSelector?: undefined;
                name?: undefined;
                parameters?: undefined;
                abstract?: undefined;
                baseContracts?: undefined;
                canonicalName?: undefined;
                contractDependencies?: undefined;
                contractKind?: undefined;
                fullyImplemented?: undefined;
                linearizedBaseContracts?: undefined;
                usedErrors?: undefined;
                usedEvents?: undefined;
            } | {
                id: number;
                nodeType: string;
                src: string;
                nodes: never[];
                absolutePath: string;
                file: string;
                nameLocation: string;
                scope: number;
                sourceUnit: number;
                symbolAliases: {
                    foreign: {
                        id: number;
                        name: string;
                        nodeType: string;
                        overloadedDeclarations: never[];
                        referencedDeclaration: number;
                        src: string;
                        typeDescriptions: {};
                    };
                    nameLocation: string;
                }[];
                unitAlias: string;
                literals?: undefined;
                errorSelector?: undefined;
                name?: undefined;
                parameters?: undefined;
                abstract?: undefined;
                baseContracts?: undefined;
                canonicalName?: undefined;
                contractDependencies?: undefined;
                contractKind?: undefined;
                fullyImplemented?: undefined;
                linearizedBaseContracts?: undefined;
                usedErrors?: undefined;
                usedEvents?: undefined;
            } | {
                id: number;
                nodeType: string;
                src: string;
                nodes: never[];
                errorSelector: string;
                name: string;
                nameLocation: string;
                parameters: {
                    id: number;
                    nodeType: string;
                    parameters: never[];
                    src: string;
                };
                literals?: undefined;
                absolutePath?: undefined;
                file?: undefined;
                scope?: undefined;
                sourceUnit?: undefined;
                symbolAliases?: undefined;
                unitAlias?: undefined;
                abstract?: undefined;
                baseContracts?: undefined;
                canonicalName?: undefined;
                contractDependencies?: undefined;
                contractKind?: undefined;
                fullyImplemented?: undefined;
                linearizedBaseContracts?: undefined;
                usedErrors?: undefined;
                usedEvents?: undefined;
            } | {
                id: number;
                nodeType: string;
                src: string;
                nodes: {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                }[];
                abstract: boolean;
                baseContracts: never[];
                canonicalName: string;
                contractDependencies: never[];
                contractKind: string;
                fullyImplemented: boolean;
                linearizedBaseContracts: number[];
                name: string;
                nameLocation: string;
                scope: number;
                usedErrors: never[];
                usedEvents: never[];
                literals?: undefined;
                absolutePath?: undefined;
                file?: undefined;
                sourceUnit?: undefined;
                symbolAliases?: undefined;
                unitAlias?: undefined;
                errorSelector?: undefined;
                parameters?: undefined;
            } | {
                id: number;
                nodeType: string;
                src: string;
                nodes: ({
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        name: string;
                        nodeType: string;
                        src: string;
                        stateMutability: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        keyName?: undefined;
                        keyNameLocation?: undefined;
                        keyType?: undefined;
                        valueName?: undefined;
                        valueNameLocation?: undefined;
                        valueType?: undefined;
                    };
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    canonicalName: string;
                    members: {
                        constant: boolean;
                        id: number;
                        mutability: string;
                        name: string;
                        nameLocation: string;
                        nodeType: string;
                        scope: number;
                        src: string;
                        stateVariable: boolean;
                        storageLocation: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        typeName: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        visibility: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    scope: number;
                    visibility: string;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        keyName: string;
                        keyNameLocation: string;
                        keyType: {
                            id: number;
                            name: string;
                            nodeType: string;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        valueName: string;
                        valueNameLocation: string;
                        valueType: {
                            id: number;
                            nodeType: string;
                            pathNode: {
                                id: number;
                                name: string;
                                nameLocations: string[];
                                nodeType: string;
                                referencedDeclaration: number;
                                src: string;
                            };
                            referencedDeclaration: number;
                            src: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                        };
                        name?: undefined;
                        stateMutability?: undefined;
                    };
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    constant: boolean;
                    functionSelector: string;
                    mutability: string;
                    name: string;
                    nameLocation: string;
                    scope: number;
                    stateVariable: boolean;
                    storageLocation: string;
                    typeDescriptions: {
                        typeIdentifier: string;
                        typeString: string;
                    };
                    typeName: {
                        id: number;
                        name: string;
                        nodeType: string;
                        src: string;
                        typeDescriptions: {
                            typeIdentifier: string;
                            typeString: string;
                        };
                        stateMutability?: undefined;
                        keyName?: undefined;
                        keyNameLocation?: undefined;
                        keyType?: undefined;
                        valueName?: undefined;
                        valueNameLocation?: undefined;
                        valueType?: undefined;
                    };
                    visibility: string;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    parameters?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    anonymous: boolean;
                    eventSelector: string;
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            indexed: boolean;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            indexed: boolean;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    scope?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    visibility?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    body?: undefined;
                    virtual?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    scope?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    implemented?: undefined;
                    kind?: undefined;
                    modifiers?: undefined;
                    returnParameters?: undefined;
                    stateMutability?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                        })[];
                    };
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            expression: {
                                                baseExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                indexExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            arguments: {
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            expression?: undefined;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            expression: {
                                                baseExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                indexExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            arguments: {
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            expression?: undefined;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            arguments: {
                                                hexValue: string;
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                value: string;
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            arguments: {
                                                hexValue: string;
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                value: string;
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            eventCall?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            arguments: {
                                                hexValue: string;
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                value: string;
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            expression: {
                                                baseExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                indexExpression: {
                                                    arguments: {
                                                        hexValue: string;
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        value: string;
                                                    }[];
                                                    expression: {
                                                        argumentTypes: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        }[];
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        typeName: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {};
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nameLocations: never[];
                                                    names: never[];
                                                    nodeType: string;
                                                    src: string;
                                                    tryCall: boolean;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            arguments: {
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            expression?: undefined;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: ({
                                    arguments: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {};
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                } | {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    arguments?: undefined;
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    nameLocations?: undefined;
                                    names?: undefined;
                                    tryCall?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                operator: string;
                                prefix: boolean;
                                src: string;
                                subExpression: {
                                    baseExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    indexExpression: {
                                        arguments: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            typeName: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {};
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: ({
                                    arguments: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {};
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    arguments?: undefined;
                                    expression?: undefined;
                                    nameLocations?: undefined;
                                    names?: undefined;
                                    tryCall?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            arguments: {
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            hexValue?: undefined;
                                            value?: undefined;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    functionReturnParameters?: undefined;
                                } | {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                            arguments?: undefined;
                                            expression?: undefined;
                                            nameLocations?: undefined;
                                            names?: undefined;
                                            tryCall?: undefined;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    functionReturnParameters?: undefined;
                                } | {
                                    functionReturnParameters: number;
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    expression?: undefined;
                                })[];
                            };
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    referencedDeclaration?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        subdenomination: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            arguments: {
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            hexValue?: undefined;
                                            value?: undefined;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                } | {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                            arguments?: undefined;
                                            expression?: undefined;
                                            nameLocations?: undefined;
                                            names?: undefined;
                                            tryCall?: undefined;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                })[];
                            };
                        })[];
                    };
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                nodeType: string;
                                pathNode: {
                                    id: number;
                                    name: string;
                                    nameLocations: string[];
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                };
                                referencedDeclaration: number;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            subdenomination: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                leftHandSide?: undefined;
                                operator?: undefined;
                                rightHandSide?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                arguments?: undefined;
                                expression?: undefined;
                                kind?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            eventCall?: undefined;
                        } | {
                            eventCall: {
                                arguments: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: {
                        id: number;
                        kind: string;
                        modifierName: {
                            id: number;
                            name: string;
                            nameLocations: string[];
                            nodeType: string;
                            referencedDeclaration: number;
                            src: string;
                        };
                        nodeType: string;
                        src: string;
                    }[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: {
                            expression: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                        }[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    arguments: never[];
                                    expression: {
                                        argumentTypes: never[];
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: never[];
                                        expression: {
                                            argumentTypes: never[];
                                            expression: {
                                                arguments: {
                                                    arguments: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    }[];
                                                    expression: {
                                                        argumentTypes: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        }[];
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        typeName: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            src: string;
                                                            stateMutability: string;
                                                            typeDescriptions: {};
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nameLocations: never[];
                                                    names: never[];
                                                    nodeType: string;
                                                    src: string;
                                                    tryCall: boolean;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    condition: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            expression?: undefined;
                                            isConstant?: undefined;
                                            isLValue?: undefined;
                                            isPure?: undefined;
                                            lValueRequested?: undefined;
                                            memberLocation?: undefined;
                                            memberName?: undefined;
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    trueBody: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: {
                                            eventCall: {
                                                arguments: ({
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    arguments?: undefined;
                                                    expression?: undefined;
                                                    isConstant?: undefined;
                                                    isLValue?: undefined;
                                                    isPure?: undefined;
                                                    kind?: undefined;
                                                    lValueRequested?: undefined;
                                                    nameLocations?: undefined;
                                                    names?: undefined;
                                                    tryCall?: undefined;
                                                } | {
                                                    arguments: {
                                                        hexValue: string;
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        value: string;
                                                    }[];
                                                    expression: {
                                                        argumentTypes: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        }[];
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        typeName: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {};
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nameLocations: never[];
                                                    names: never[];
                                                    nodeType: string;
                                                    src: string;
                                                    tryCall: boolean;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    name?: undefined;
                                                    overloadedDeclarations?: undefined;
                                                    referencedDeclaration?: undefined;
                                                })[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                        }[];
                                    };
                                    expression?: undefined;
                                    functionReturnParameters?: undefined;
                                } | {
                                    condition: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            name?: undefined;
                                            overloadedDeclarations?: undefined;
                                            referencedDeclaration?: undefined;
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    trueBody: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: ({
                                            assignments: number[];
                                            declarations: {
                                                constant: boolean;
                                                id: number;
                                                mutability: string;
                                                name: string;
                                                nameLocation: string;
                                                nodeType: string;
                                                scope: number;
                                                src: string;
                                                stateVariable: boolean;
                                                storageLocation: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                visibility: string;
                                            }[];
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            AST?: undefined;
                                            evmVersion?: undefined;
                                            externalReferences?: undefined;
                                            condition?: undefined;
                                            falseBody?: undefined;
                                            trueBody?: undefined;
                                        } | {
                                            AST: {
                                                nativeSrc: string;
                                                nodeType: string;
                                                src: string;
                                                statements: {
                                                    nativeSrc: string;
                                                    nodeType: string;
                                                    src: string;
                                                    value: {
                                                        arguments: {
                                                            name: string;
                                                            nativeSrc: string;
                                                            nodeType: string;
                                                            src: string;
                                                        }[];
                                                        functionName: {
                                                            name: string;
                                                            nativeSrc: string;
                                                            nodeType: string;
                                                            src: string;
                                                        };
                                                        nativeSrc: string;
                                                        nodeType: string;
                                                        src: string;
                                                    };
                                                    variableNames: {
                                                        name: string;
                                                        nativeSrc: string;
                                                        nodeType: string;
                                                        src: string;
                                                    }[];
                                                }[];
                                            };
                                            evmVersion: string;
                                            externalReferences: ({
                                                declaration: number;
                                                isOffset: boolean;
                                                isSlot: boolean;
                                                src: string;
                                                suffix: string;
                                                valueSize: number;
                                            } | {
                                                declaration: number;
                                                isOffset: boolean;
                                                isSlot: boolean;
                                                src: string;
                                                valueSize: number;
                                                suffix?: undefined;
                                            })[];
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            assignments?: undefined;
                                            declarations?: undefined;
                                            condition?: undefined;
                                            falseBody?: undefined;
                                            trueBody?: undefined;
                                        } | {
                                            condition: {
                                                commonType: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                leftExpression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                nodeType: string;
                                                operator: string;
                                                rightExpression: {
                                                    hexValue: string;
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    value: string;
                                                };
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            falseBody: {
                                                condition: {
                                                    commonType: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    leftExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    operator: string;
                                                    rightExpression: {
                                                        hexValue: string;
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        value: string;
                                                    };
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                trueBody: {
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    statements: ({
                                                        AST: {
                                                            nativeSrc: string;
                                                            nodeType: string;
                                                            src: string;
                                                            statements: {
                                                                nativeSrc: string;
                                                                nodeType: string;
                                                                src: string;
                                                                value: {
                                                                    arguments: {
                                                                        arguments: ({
                                                                            name: string;
                                                                            nativeSrc: string;
                                                                            nodeType: string;
                                                                            src: string;
                                                                            kind?: undefined;
                                                                            type?: undefined;
                                                                            value?: undefined;
                                                                        } | {
                                                                            kind: string;
                                                                            nativeSrc: string;
                                                                            nodeType: string;
                                                                            src: string;
                                                                            type: string;
                                                                            value: string;
                                                                            name?: undefined;
                                                                        })[];
                                                                        functionName: {
                                                                            name: string;
                                                                            nativeSrc: string;
                                                                            nodeType: string;
                                                                            src: string;
                                                                        };
                                                                        nativeSrc: string;
                                                                        nodeType: string;
                                                                        src: string;
                                                                    }[];
                                                                    functionName: {
                                                                        name: string;
                                                                        nativeSrc: string;
                                                                        nodeType: string;
                                                                        src: string;
                                                                    };
                                                                    nativeSrc: string;
                                                                    nodeType: string;
                                                                    src: string;
                                                                };
                                                                variableNames: {
                                                                    name: string;
                                                                    nativeSrc: string;
                                                                    nodeType: string;
                                                                    src: string;
                                                                }[];
                                                            }[];
                                                        };
                                                        evmVersion: string;
                                                        externalReferences: ({
                                                            declaration: number;
                                                            isOffset: boolean;
                                                            isSlot: boolean;
                                                            src: string;
                                                            valueSize: number;
                                                            suffix?: undefined;
                                                        } | {
                                                            declaration: number;
                                                            isOffset: boolean;
                                                            isSlot: boolean;
                                                            src: string;
                                                            suffix: string;
                                                            valueSize: number;
                                                        })[];
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        eventCall?: undefined;
                                                    } | {
                                                        eventCall: {
                                                            arguments: {
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            }[];
                                                            expression: {
                                                                argumentTypes: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                }[];
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nameLocations: never[];
                                                            names: never[];
                                                            nodeType: string;
                                                            src: string;
                                                            tryCall: boolean;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        AST?: undefined;
                                                        evmVersion?: undefined;
                                                        externalReferences?: undefined;
                                                    })[];
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            trueBody: {
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                statements: ({
                                                    AST: {
                                                        nativeSrc: string;
                                                        nodeType: string;
                                                        src: string;
                                                        statements: {
                                                            nativeSrc: string;
                                                            nodeType: string;
                                                            src: string;
                                                            value: {
                                                                arguments: {
                                                                    arguments: ({
                                                                        name: string;
                                                                        nativeSrc: string;
                                                                        nodeType: string;
                                                                        src: string;
                                                                        kind?: undefined;
                                                                        type?: undefined;
                                                                        value?: undefined;
                                                                    } | {
                                                                        kind: string;
                                                                        nativeSrc: string;
                                                                        nodeType: string;
                                                                        src: string;
                                                                        type: string;
                                                                        value: string;
                                                                        name?: undefined;
                                                                    })[];
                                                                    functionName: {
                                                                        name: string;
                                                                        nativeSrc: string;
                                                                        nodeType: string;
                                                                        src: string;
                                                                    };
                                                                    nativeSrc: string;
                                                                    nodeType: string;
                                                                    src: string;
                                                                }[];
                                                                functionName: {
                                                                    name: string;
                                                                    nativeSrc: string;
                                                                    nodeType: string;
                                                                    src: string;
                                                                };
                                                                nativeSrc: string;
                                                                nodeType: string;
                                                                src: string;
                                                            };
                                                            variableNames: {
                                                                name: string;
                                                                nativeSrc: string;
                                                                nodeType: string;
                                                                src: string;
                                                            }[];
                                                        }[];
                                                    };
                                                    evmVersion: string;
                                                    externalReferences: ({
                                                        declaration: number;
                                                        isOffset: boolean;
                                                        isSlot: boolean;
                                                        src: string;
                                                        valueSize: number;
                                                        suffix?: undefined;
                                                    } | {
                                                        declaration: number;
                                                        isOffset: boolean;
                                                        isSlot: boolean;
                                                        src: string;
                                                        suffix: string;
                                                        valueSize: number;
                                                    })[];
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    eventCall?: undefined;
                                                } | {
                                                    eventCall: {
                                                        arguments: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        }[];
                                                        expression: {
                                                            argumentTypes: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            }[];
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nameLocations: never[];
                                                        names: never[];
                                                        nodeType: string;
                                                        src: string;
                                                        tryCall: boolean;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    AST?: undefined;
                                                    evmVersion?: undefined;
                                                    externalReferences?: undefined;
                                                })[];
                                            };
                                            assignments?: undefined;
                                            declarations?: undefined;
                                            AST?: undefined;
                                            evmVersion?: undefined;
                                            externalReferences?: undefined;
                                        })[];
                                    };
                                    expression?: undefined;
                                    functionReturnParameters?: undefined;
                                } | {
                                    expression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    functionReturnParameters: number;
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    condition?: undefined;
                                    trueBody?: undefined;
                                })[];
                                expression?: undefined;
                                functionReturnParameters?: undefined;
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            AST?: undefined;
                            evmVersion?: undefined;
                            externalReferences?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    arguments?: undefined;
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    nameLocations?: undefined;
                                    names?: undefined;
                                    tryCall?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    assignments: number[];
                                    declarations: {
                                        constant: boolean;
                                        id: number;
                                        mutability: string;
                                        name: string;
                                        nameLocation: string;
                                        nodeType: string;
                                        scope: number;
                                        src: string;
                                        stateVariable: boolean;
                                        storageLocation: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            nodeType: string;
                                            pathNode: {
                                                id: number;
                                                name: string;
                                                nameLocations: string[];
                                                nodeType: string;
                                                referencedDeclaration: number;
                                                src: string;
                                            };
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        visibility: string;
                                    }[];
                                    id: number;
                                    initialValue: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            arguments: {
                                                hexValue: string;
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                value: string;
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    src: string;
                                    condition?: undefined;
                                    trueBody?: undefined;
                                } | {
                                    condition: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    trueBody: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: ({
                                            expression: {
                                                arguments: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            statements?: undefined;
                                            eventCall?: undefined;
                                        } | {
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            statements: ({
                                                assignments: number[];
                                                declarations: {
                                                    constant: boolean;
                                                    id: number;
                                                    mutability: string;
                                                    name: string;
                                                    nameLocation: string;
                                                    nodeType: string;
                                                    scope: number;
                                                    src: string;
                                                    stateVariable: boolean;
                                                    storageLocation: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    typeName: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    visibility: string;
                                                }[];
                                                id: number;
                                                initialValue: {
                                                    commonType: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    leftExpression: {
                                                        expression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        memberLocation: string;
                                                        memberName: string;
                                                        nodeType: string;
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    operator: string;
                                                    rightExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                nodeType: string;
                                                src: string;
                                                condition?: undefined;
                                                trueBody?: undefined;
                                                expression?: undefined;
                                            } | {
                                                condition: {
                                                    commonType: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    leftExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    operator: string;
                                                    rightExpression: {
                                                        expression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        memberLocation: string;
                                                        memberName: string;
                                                        nodeType: string;
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                trueBody: {
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    statements: ({
                                                        eventCall: {
                                                            arguments: ({
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                                expression?: undefined;
                                                                isConstant?: undefined;
                                                                isLValue?: undefined;
                                                                isPure?: undefined;
                                                                lValueRequested?: undefined;
                                                                memberLocation?: undefined;
                                                                memberName?: undefined;
                                                            } | {
                                                                expression: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                memberLocation: string;
                                                                memberName: string;
                                                                nodeType: string;
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                                name?: undefined;
                                                                overloadedDeclarations?: undefined;
                                                            })[];
                                                            expression: {
                                                                argumentTypes: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                }[];
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nameLocations: never[];
                                                            names: never[];
                                                            nodeType: string;
                                                            src: string;
                                                            tryCall: boolean;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        errorCall?: undefined;
                                                    } | {
                                                        errorCall: {
                                                            arguments: never[];
                                                            expression: {
                                                                argumentTypes: never[];
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nameLocations: never[];
                                                            names: never[];
                                                            nodeType: string;
                                                            src: string;
                                                            tryCall: boolean;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        eventCall?: undefined;
                                                    })[];
                                                };
                                                assignments?: undefined;
                                                declarations?: undefined;
                                                initialValue?: undefined;
                                                expression?: undefined;
                                            } | {
                                                expression: {
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    leftHandSide: {
                                                        expression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        memberLocation: string;
                                                        memberName: string;
                                                        nodeType: string;
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    operator: string;
                                                    rightHandSide: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                assignments?: undefined;
                                                declarations?: undefined;
                                                initialValue?: undefined;
                                                condition?: undefined;
                                                trueBody?: undefined;
                                            })[];
                                            expression?: undefined;
                                            eventCall?: undefined;
                                        } | {
                                            eventCall: {
                                                arguments: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            expression?: undefined;
                                            statements?: undefined;
                                        } | {
                                            eventCall: {
                                                arguments: ({
                                                    arguments: {
                                                        hexValue: string;
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        value: string;
                                                    }[];
                                                    expression: {
                                                        argumentTypes: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        }[];
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        typeName: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {};
                                                        };
                                                        name?: undefined;
                                                        overloadedDeclarations?: undefined;
                                                        referencedDeclaration?: undefined;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nameLocations: never[];
                                                    names: never[];
                                                    nodeType: string;
                                                    src: string;
                                                    tryCall: boolean;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    memberLocation?: undefined;
                                                    memberName?: undefined;
                                                    referencedDeclaration?: undefined;
                                                } | {
                                                    expression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        argumentTypes?: undefined;
                                                        isConstant?: undefined;
                                                        isLValue?: undefined;
                                                        isPure?: undefined;
                                                        lValueRequested?: undefined;
                                                        typeName?: undefined;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    arguments?: undefined;
                                                    kind?: undefined;
                                                    nameLocations?: undefined;
                                                    names?: undefined;
                                                    tryCall?: undefined;
                                                })[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            expression?: undefined;
                                            statements?: undefined;
                                        })[];
                                    };
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                })[];
                                expression?: undefined;
                                functionReturnParameters?: undefined;
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            AST?: undefined;
                            evmVersion?: undefined;
                            externalReferences?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        argumentTypes?: undefined;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    arguments?: undefined;
                                    kind?: undefined;
                                    nameLocations?: undefined;
                                    names?: undefined;
                                    tryCall?: undefined;
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                expression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                functionReturnParameters: number;
                                id: number;
                                nodeType: string;
                                src: string;
                                statements?: undefined;
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            AST?: undefined;
                            evmVersion?: undefined;
                            externalReferences?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            AST?: undefined;
                            evmVersion?: undefined;
                            externalReferences?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            AST: {
                                nativeSrc: string;
                                nodeType: string;
                                src: string;
                                statements: {
                                    nativeSrc: string;
                                    nodeType: string;
                                    src: string;
                                    value: {
                                        arguments: {
                                            name: string;
                                            nativeSrc: string;
                                            nodeType: string;
                                            src: string;
                                        }[];
                                        functionName: {
                                            name: string;
                                            nativeSrc: string;
                                            nodeType: string;
                                            src: string;
                                        };
                                        nativeSrc: string;
                                        nodeType: string;
                                        src: string;
                                    };
                                    variableNames: {
                                        name: string;
                                        nativeSrc: string;
                                        nodeType: string;
                                        src: string;
                                    }[];
                                }[];
                            };
                            evmVersion: string;
                            externalReferences: ({
                                declaration: number;
                                isOffset: boolean;
                                isSlot: boolean;
                                src: string;
                                suffix: string;
                                valueSize: number;
                            } | {
                                declaration: number;
                                isOffset: boolean;
                                isSlot: boolean;
                                src: string;
                                valueSize: number;
                                suffix?: undefined;
                            })[];
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    arguments?: undefined;
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    nameLocations?: undefined;
                                    names?: undefined;
                                    tryCall?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    assignments: number[];
                                    declarations: {
                                        constant: boolean;
                                        id: number;
                                        mutability: string;
                                        name: string;
                                        nameLocation: string;
                                        nodeType: string;
                                        scope: number;
                                        src: string;
                                        stateVariable: boolean;
                                        storageLocation: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        visibility: string;
                                    }[];
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    AST?: undefined;
                                    evmVersion?: undefined;
                                    externalReferences?: undefined;
                                    expression?: undefined;
                                    functionReturnParameters?: undefined;
                                } | {
                                    AST: {
                                        nativeSrc: string;
                                        nodeType: string;
                                        src: string;
                                        statements: {
                                            nativeSrc: string;
                                            nodeType: string;
                                            src: string;
                                            value: {
                                                arguments: {
                                                    arguments: ({
                                                        name: string;
                                                        nativeSrc: string;
                                                        nodeType: string;
                                                        src: string;
                                                        kind?: undefined;
                                                        type?: undefined;
                                                        value?: undefined;
                                                    } | {
                                                        kind: string;
                                                        nativeSrc: string;
                                                        nodeType: string;
                                                        src: string;
                                                        type: string;
                                                        value: string;
                                                        name?: undefined;
                                                    })[];
                                                    functionName: {
                                                        name: string;
                                                        nativeSrc: string;
                                                        nodeType: string;
                                                        src: string;
                                                    };
                                                    nativeSrc: string;
                                                    nodeType: string;
                                                    src: string;
                                                }[];
                                                functionName: {
                                                    name: string;
                                                    nativeSrc: string;
                                                    nodeType: string;
                                                    src: string;
                                                };
                                                nativeSrc: string;
                                                nodeType: string;
                                                src: string;
                                            };
                                            variableNames: {
                                                name: string;
                                                nativeSrc: string;
                                                nodeType: string;
                                                src: string;
                                            }[];
                                        }[];
                                    };
                                    evmVersion: string;
                                    externalReferences: ({
                                        declaration: number;
                                        isOffset: boolean;
                                        isSlot: boolean;
                                        src: string;
                                        valueSize: number;
                                        suffix?: undefined;
                                    } | {
                                        declaration: number;
                                        isOffset: boolean;
                                        isSlot: boolean;
                                        src: string;
                                        suffix: string;
                                        valueSize: number;
                                    })[];
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    expression?: undefined;
                                    functionReturnParameters?: undefined;
                                } | {
                                    expression: {
                                        arguments: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        }[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    functionReturnParameters: number;
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    AST?: undefined;
                                    evmVersion?: undefined;
                                    externalReferences?: undefined;
                                })[];
                                expression?: undefined;
                                functionReturnParameters?: undefined;
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            AST?: undefined;
                            evmVersion?: undefined;
                            externalReferences?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                hexValue: string;
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                value: string;
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            assignments?: undefined;
                            declarations?: undefined;
                            AST?: undefined;
                            evmVersion?: undefined;
                            externalReferences?: undefined;
                        })[];
                    };
                    baseFunctions: number[];
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    overrides: {
                        id: number;
                        nodeType: string;
                        overrides: never[];
                        src: string;
                    };
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    documentation?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                baseExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                indexExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            statements?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                expression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                functionReturnParameters: number;
                                id: number;
                                nodeType: string;
                                src: string;
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            expression?: undefined;
                            statements?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                arguments: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                }[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                hexValue?: undefined;
                                value?: undefined;
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            statements?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            id: number;
                            nodeType: string;
                            src: string;
                            statements: ({
                                assignments: number[];
                                declarations: {
                                    constant: boolean;
                                    id: number;
                                    mutability: string;
                                    name: string;
                                    nameLocation: string;
                                    nodeType: string;
                                    scope: number;
                                    src: string;
                                    stateVariable: boolean;
                                    storageLocation: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    typeName: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    visibility: string;
                                }[];
                                id: number;
                                initialValue: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                src: string;
                                condition?: undefined;
                                trueBody?: undefined;
                                expression?: undefined;
                            } | {
                                condition: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                                trueBody: {
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    statements: ({
                                        eventCall: {
                                            arguments: ({
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                expression?: undefined;
                                                isConstant?: undefined;
                                                isLValue?: undefined;
                                                isPure?: undefined;
                                                lValueRequested?: undefined;
                                                memberLocation?: undefined;
                                                memberName?: undefined;
                                            } | {
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                name?: undefined;
                                                overloadedDeclarations?: undefined;
                                            })[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        errorCall?: undefined;
                                    } | {
                                        errorCall: {
                                            arguments: never[];
                                            expression: {
                                                argumentTypes: never[];
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        eventCall?: undefined;
                                    })[];
                                };
                                assignments?: undefined;
                                declarations?: undefined;
                                initialValue?: undefined;
                                expression?: undefined;
                            } | {
                                expression: {
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftHandSide: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightHandSide: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                nodeType: string;
                                src: string;
                                assignments?: undefined;
                                declarations?: undefined;
                                initialValue?: undefined;
                                condition?: undefined;
                                trueBody?: undefined;
                            })[];
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            eventCall?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            eventCall: {
                                arguments: ({
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                } | {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            statements?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                hexValue: string;
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                value: string;
                                arguments?: undefined;
                                expression?: undefined;
                                nameLocations?: undefined;
                                names?: undefined;
                                tryCall?: undefined;
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                            statements?: undefined;
                            eventCall?: undefined;
                        })[];
                    };
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    functionSelector?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    documentation?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            expression: {
                                arguments: ({
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                } | {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                })[];
                                expression: {
                                    argumentTypes: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    }[];
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: number[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                kind: string;
                                lValueRequested: boolean;
                                nameLocations: never[];
                                names: never[];
                                nodeType: string;
                                src: string;
                                tryCall: boolean;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    arguments: never[];
                                    expression: {
                                        argumentTypes: never[];
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        arguments: never[];
                                        expression: {
                                            argumentTypes: never[];
                                            expression: {
                                                arguments: {
                                                    arguments: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    }[];
                                                    expression: {
                                                        argumentTypes: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        }[];
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        typeName: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            src: string;
                                                            stateMutability: string;
                                                            typeDescriptions: {};
                                                        };
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nameLocations: never[];
                                                    names: never[];
                                                    nodeType: string;
                                                    src: string;
                                                    tryCall: boolean;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    eventCall: {
                                        arguments: ({
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            arguments?: undefined;
                                            expression?: undefined;
                                            isConstant?: undefined;
                                            isLValue?: undefined;
                                            isPure?: undefined;
                                            kind?: undefined;
                                            lValueRequested?: undefined;
                                            nameLocations?: undefined;
                                            names?: undefined;
                                            tryCall?: undefined;
                                        } | {
                                            arguments: {
                                                hexValue: string;
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                value: string;
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            name?: undefined;
                                            overloadedDeclarations?: undefined;
                                            referencedDeclaration?: undefined;
                                        })[];
                                        expression: {
                                            argumentTypes: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            }[];
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nameLocations: never[];
                                        names: never[];
                                        nodeType: string;
                                        src: string;
                                        tryCall: boolean;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    functionReturnParameters?: undefined;
                                } | {
                                    functionReturnParameters: number;
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    eventCall?: undefined;
                                })[];
                            };
                            expression?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    arguments?: undefined;
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    nameLocations?: undefined;
                                    names?: undefined;
                                    tryCall?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: ({
                                    assignments: number[];
                                    declarations: {
                                        constant: boolean;
                                        id: number;
                                        mutability: string;
                                        name: string;
                                        nameLocation: string;
                                        nodeType: string;
                                        scope: number;
                                        src: string;
                                        stateVariable: boolean;
                                        storageLocation: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            nodeType: string;
                                            pathNode: {
                                                id: number;
                                                name: string;
                                                nameLocations: string[];
                                                nodeType: string;
                                                referencedDeclaration: number;
                                                src: string;
                                            };
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        visibility: string;
                                    }[];
                                    id: number;
                                    initialValue: {
                                        baseExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        indexExpression: {
                                            arguments: {
                                                hexValue: string;
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                value: string;
                                            }[];
                                            expression: {
                                                argumentTypes: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                }[];
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                typeName: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    src: string;
                                                    typeDescriptions: {};
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nameLocations: never[];
                                            names: never[];
                                            nodeType: string;
                                            src: string;
                                            tryCall: boolean;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    src: string;
                                    condition?: undefined;
                                    trueBody?: undefined;
                                } | {
                                    condition: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            expression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            memberLocation: string;
                                            memberName: string;
                                            nodeType: string;
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                    trueBody: {
                                        id: number;
                                        nodeType: string;
                                        src: string;
                                        statements: ({
                                            expression: {
                                                arguments: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            statements?: undefined;
                                            eventCall?: undefined;
                                        } | {
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            statements: ({
                                                assignments: number[];
                                                declarations: {
                                                    constant: boolean;
                                                    id: number;
                                                    mutability: string;
                                                    name: string;
                                                    nameLocation: string;
                                                    nodeType: string;
                                                    scope: number;
                                                    src: string;
                                                    stateVariable: boolean;
                                                    storageLocation: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    typeName: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    visibility: string;
                                                }[];
                                                id: number;
                                                initialValue: {
                                                    commonType: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    leftExpression: {
                                                        expression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        memberLocation: string;
                                                        memberName: string;
                                                        nodeType: string;
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    operator: string;
                                                    rightExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                nodeType: string;
                                                src: string;
                                                condition?: undefined;
                                                trueBody?: undefined;
                                                expression?: undefined;
                                            } | {
                                                condition: {
                                                    commonType: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    leftExpression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    operator: string;
                                                    rightExpression: {
                                                        expression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        memberLocation: string;
                                                        memberName: string;
                                                        nodeType: string;
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                trueBody: {
                                                    id: number;
                                                    nodeType: string;
                                                    src: string;
                                                    statements: ({
                                                        eventCall: {
                                                            arguments: ({
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                                expression?: undefined;
                                                                isConstant?: undefined;
                                                                isLValue?: undefined;
                                                                isPure?: undefined;
                                                                lValueRequested?: undefined;
                                                                memberLocation?: undefined;
                                                                memberName?: undefined;
                                                            } | {
                                                                expression: {
                                                                    id: number;
                                                                    name: string;
                                                                    nodeType: string;
                                                                    overloadedDeclarations: never[];
                                                                    referencedDeclaration: number;
                                                                    src: string;
                                                                    typeDescriptions: {
                                                                        typeIdentifier: string;
                                                                        typeString: string;
                                                                    };
                                                                };
                                                                id: number;
                                                                isConstant: boolean;
                                                                isLValue: boolean;
                                                                isPure: boolean;
                                                                lValueRequested: boolean;
                                                                memberLocation: string;
                                                                memberName: string;
                                                                nodeType: string;
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                                name?: undefined;
                                                                overloadedDeclarations?: undefined;
                                                            })[];
                                                            expression: {
                                                                argumentTypes: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                }[];
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nameLocations: never[];
                                                            names: never[];
                                                            nodeType: string;
                                                            src: string;
                                                            tryCall: boolean;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        errorCall?: undefined;
                                                    } | {
                                                        errorCall: {
                                                            arguments: never[];
                                                            expression: {
                                                                argumentTypes: never[];
                                                                id: number;
                                                                name: string;
                                                                nodeType: string;
                                                                overloadedDeclarations: never[];
                                                                referencedDeclaration: number;
                                                                src: string;
                                                                typeDescriptions: {
                                                                    typeIdentifier: string;
                                                                    typeString: string;
                                                                };
                                                            };
                                                            id: number;
                                                            isConstant: boolean;
                                                            isLValue: boolean;
                                                            isPure: boolean;
                                                            kind: string;
                                                            lValueRequested: boolean;
                                                            nameLocations: never[];
                                                            names: never[];
                                                            nodeType: string;
                                                            src: string;
                                                            tryCall: boolean;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        nodeType: string;
                                                        src: string;
                                                        eventCall?: undefined;
                                                    })[];
                                                };
                                                assignments?: undefined;
                                                declarations?: undefined;
                                                initialValue?: undefined;
                                                expression?: undefined;
                                            } | {
                                                expression: {
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    leftHandSide: {
                                                        expression: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            overloadedDeclarations: never[];
                                                            referencedDeclaration: number;
                                                            src: string;
                                                            typeDescriptions: {
                                                                typeIdentifier: string;
                                                                typeString: string;
                                                            };
                                                        };
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        memberLocation: string;
                                                        memberName: string;
                                                        nodeType: string;
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    nodeType: string;
                                                    operator: string;
                                                    rightHandSide: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                    };
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                nodeType: string;
                                                src: string;
                                                assignments?: undefined;
                                                declarations?: undefined;
                                                initialValue?: undefined;
                                                condition?: undefined;
                                                trueBody?: undefined;
                                            })[];
                                            expression?: undefined;
                                            eventCall?: undefined;
                                        } | {
                                            eventCall: {
                                                arguments: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                }[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            expression?: undefined;
                                            statements?: undefined;
                                        } | {
                                            eventCall: {
                                                arguments: ({
                                                    arguments: {
                                                        hexValue: string;
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        kind: string;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        value: string;
                                                    }[];
                                                    expression: {
                                                        argumentTypes: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        }[];
                                                        id: number;
                                                        isConstant: boolean;
                                                        isLValue: boolean;
                                                        isPure: boolean;
                                                        lValueRequested: boolean;
                                                        nodeType: string;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        typeName: {
                                                            id: number;
                                                            name: string;
                                                            nodeType: string;
                                                            src: string;
                                                            typeDescriptions: {};
                                                        };
                                                        name?: undefined;
                                                        overloadedDeclarations?: undefined;
                                                        referencedDeclaration?: undefined;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    kind: string;
                                                    lValueRequested: boolean;
                                                    nameLocations: never[];
                                                    names: never[];
                                                    nodeType: string;
                                                    src: string;
                                                    tryCall: boolean;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    memberLocation?: undefined;
                                                    memberName?: undefined;
                                                    referencedDeclaration?: undefined;
                                                } | {
                                                    expression: {
                                                        id: number;
                                                        name: string;
                                                        nodeType: string;
                                                        overloadedDeclarations: never[];
                                                        referencedDeclaration: number;
                                                        src: string;
                                                        typeDescriptions: {
                                                            typeIdentifier: string;
                                                            typeString: string;
                                                        };
                                                        argumentTypes?: undefined;
                                                        isConstant?: undefined;
                                                        isLValue?: undefined;
                                                        isPure?: undefined;
                                                        lValueRequested?: undefined;
                                                        typeName?: undefined;
                                                    };
                                                    id: number;
                                                    isConstant: boolean;
                                                    isLValue: boolean;
                                                    isPure: boolean;
                                                    lValueRequested: boolean;
                                                    memberLocation: string;
                                                    memberName: string;
                                                    nodeType: string;
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                    arguments?: undefined;
                                                    kind?: undefined;
                                                    nameLocations?: undefined;
                                                    names?: undefined;
                                                    tryCall?: undefined;
                                                })[];
                                                expression: {
                                                    argumentTypes: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    }[];
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nameLocations: never[];
                                                names: never[];
                                                nodeType: string;
                                                src: string;
                                                tryCall: boolean;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            id: number;
                                            nodeType: string;
                                            src: string;
                                            expression?: undefined;
                                            statements?: undefined;
                                        })[];
                                    };
                                    assignments?: undefined;
                                    declarations?: undefined;
                                    initialValue?: undefined;
                                })[];
                            };
                            expression?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: ({
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                stateMutability: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        } | {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                stateMutability?: undefined;
                            };
                            visibility: string;
                        })[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                baseExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                indexExpression: {
                                    arguments: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {};
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            nodeType: string;
                            src: string;
                            expression?: undefined;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                        } | {
                            expression: {
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftHandSide: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightHandSide: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            falseBody?: undefined;
                            trueBody?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    expression?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    lValueRequested?: undefined;
                                    memberLocation?: undefined;
                                    memberName?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    isConstant?: undefined;
                                    isLValue?: undefined;
                                    isPure?: undefined;
                                    kind?: undefined;
                                    lValueRequested?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            falseBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            commonType: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            leftExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            nodeType: string;
                                            operator: string;
                                            rightExpression: {
                                                id: number;
                                                name: string;
                                                nodeType: string;
                                                overloadedDeclarations: never[];
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            expression?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    name?: undefined;
                                    overloadedDeclarations?: undefined;
                                    referencedDeclaration?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            commonType: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            lValueRequested: boolean;
                                            leftExpression: {
                                                expression: {
                                                    id: number;
                                                    name: string;
                                                    nodeType: string;
                                                    overloadedDeclarations: never[];
                                                    referencedDeclaration: number;
                                                    src: string;
                                                    typeDescriptions: {
                                                        typeIdentifier: string;
                                                        typeString: string;
                                                    };
                                                };
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                lValueRequested: boolean;
                                                memberLocation: string;
                                                memberName: string;
                                                nodeType: string;
                                                referencedDeclaration: number;
                                                src: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                            };
                                            nodeType: string;
                                            operator: string;
                                            rightExpression: {
                                                hexValue: string;
                                                id: number;
                                                isConstant: boolean;
                                                isLValue: boolean;
                                                isPure: boolean;
                                                kind: string;
                                                lValueRequested: boolean;
                                                nodeType: string;
                                                src: string;
                                                subdenomination: string;
                                                typeDescriptions: {
                                                    typeIdentifier: string;
                                                    typeString: string;
                                                };
                                                value: string;
                                            };
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            expression?: undefined;
                            falseBody?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: never[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                } | {
                    id: number;
                    nodeType: string;
                    src: string;
                    nodes: never[];
                    body: {
                        id: number;
                        nodeType: string;
                        src: string;
                        nodes: never[];
                        statements: ({
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    nodeType: string;
                                    pathNode: {
                                        id: number;
                                        name: string;
                                        nameLocations: string[];
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                    };
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                baseExpression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                indexExpression: {
                                    arguments: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    }[];
                                    expression: {
                                        argumentTypes: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        }[];
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        typeName: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {};
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nameLocations: never[];
                                    names: never[];
                                    nodeType: string;
                                    src: string;
                                    tryCall: boolean;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                expression?: undefined;
                                memberLocation?: undefined;
                                memberName?: undefined;
                                referencedDeclaration?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                    commonType?: undefined;
                                    leftExpression?: undefined;
                                    operator?: undefined;
                                    rightExpression?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                expression: {
                                    hexValue: string;
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    kind: string;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    value: string;
                                };
                                functionReturnParameters: number;
                                id: number;
                                nodeType: string;
                                src: string;
                                statements?: undefined;
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            assignments: number[];
                            declarations: {
                                constant: boolean;
                                id: number;
                                mutability: string;
                                name: string;
                                nameLocation: string;
                                nodeType: string;
                                scope: number;
                                src: string;
                                stateVariable: boolean;
                                storageLocation: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                typeName: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                visibility: string;
                            }[];
                            id: number;
                            initialValue: {
                                expression: {
                                    id: number;
                                    name: string;
                                    nodeType: string;
                                    overloadedDeclarations: never[];
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                memberLocation: string;
                                memberName: string;
                                nodeType: string;
                                referencedDeclaration: number;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                baseExpression?: undefined;
                                indexExpression?: undefined;
                            };
                            nodeType: string;
                            src: string;
                            condition?: undefined;
                            trueBody?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            condition: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    referencedDeclaration?: undefined;
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    commonType: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    leftExpression: {
                                        expression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        memberLocation: string;
                                        memberName: string;
                                        nodeType: string;
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    nodeType: string;
                                    operator: string;
                                    rightExpression: {
                                        hexValue: string;
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        kind: string;
                                        lValueRequested: boolean;
                                        nodeType: string;
                                        src: string;
                                        subdenomination: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        value: string;
                                    };
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                    hexValue?: undefined;
                                    kind?: undefined;
                                    value?: undefined;
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            id: number;
                            nodeType: string;
                            src: string;
                            trueBody: {
                                id: number;
                                nodeType: string;
                                src: string;
                                statements: {
                                    expression: {
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftHandSide: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightHandSide: {
                                            hexValue: string;
                                            id: number;
                                            isConstant: boolean;
                                            isLValue: boolean;
                                            isPure: boolean;
                                            kind: string;
                                            lValueRequested: boolean;
                                            nodeType: string;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                            value: string;
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    nodeType: string;
                                    src: string;
                                }[];
                                expression?: undefined;
                                functionReturnParameters?: undefined;
                            };
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            expression?: undefined;
                            functionReturnParameters?: undefined;
                        } | {
                            expression: {
                                commonType: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                                id: number;
                                isConstant: boolean;
                                isLValue: boolean;
                                isPure: boolean;
                                lValueRequested: boolean;
                                leftExpression: {
                                    components: {
                                        commonType: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                        id: number;
                                        isConstant: boolean;
                                        isLValue: boolean;
                                        isPure: boolean;
                                        lValueRequested: boolean;
                                        leftExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        nodeType: string;
                                        operator: string;
                                        rightExpression: {
                                            id: number;
                                            name: string;
                                            nodeType: string;
                                            overloadedDeclarations: never[];
                                            referencedDeclaration: number;
                                            src: string;
                                            typeDescriptions: {
                                                typeIdentifier: string;
                                                typeString: string;
                                            };
                                        };
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    }[];
                                    id: number;
                                    isConstant: boolean;
                                    isInlineArray: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    nodeType: string;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                nodeType: string;
                                operator: string;
                                rightExpression: {
                                    expression: {
                                        id: number;
                                        name: string;
                                        nodeType: string;
                                        overloadedDeclarations: never[];
                                        referencedDeclaration: number;
                                        src: string;
                                        typeDescriptions: {
                                            typeIdentifier: string;
                                            typeString: string;
                                        };
                                    };
                                    id: number;
                                    isConstant: boolean;
                                    isLValue: boolean;
                                    isPure: boolean;
                                    lValueRequested: boolean;
                                    memberLocation: string;
                                    memberName: string;
                                    nodeType: string;
                                    referencedDeclaration: number;
                                    src: string;
                                    typeDescriptions: {
                                        typeIdentifier: string;
                                        typeString: string;
                                    };
                                };
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            functionReturnParameters: number;
                            id: number;
                            nodeType: string;
                            src: string;
                            assignments?: undefined;
                            declarations?: undefined;
                            initialValue?: undefined;
                            condition?: undefined;
                            trueBody?: undefined;
                        })[];
                    };
                    documentation: {
                        id: number;
                        nodeType: string;
                        src: string;
                        text: string;
                    };
                    functionSelector: string;
                    implemented: boolean;
                    kind: string;
                    modifiers: never[];
                    name: string;
                    nameLocation: string;
                    parameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    returnParameters: {
                        id: number;
                        nodeType: string;
                        parameters: {
                            constant: boolean;
                            id: number;
                            mutability: string;
                            name: string;
                            nameLocation: string;
                            nodeType: string;
                            scope: number;
                            src: string;
                            stateVariable: boolean;
                            storageLocation: string;
                            typeDescriptions: {
                                typeIdentifier: string;
                                typeString: string;
                            };
                            typeName: {
                                id: number;
                                name: string;
                                nodeType: string;
                                src: string;
                                typeDescriptions: {
                                    typeIdentifier: string;
                                    typeString: string;
                                };
                            };
                            visibility: string;
                        }[];
                        src: string;
                    };
                    scope: number;
                    stateMutability: string;
                    virtual: boolean;
                    visibility: string;
                    constant?: undefined;
                    mutability?: undefined;
                    stateVariable?: undefined;
                    storageLocation?: undefined;
                    typeDescriptions?: undefined;
                    typeName?: undefined;
                    canonicalName?: undefined;
                    members?: undefined;
                    anonymous?: undefined;
                    eventSelector?: undefined;
                    baseFunctions?: undefined;
                    overrides?: undefined;
                })[];
                abstract: boolean;
                baseContracts: {
                    baseName: {
                        id: number;
                        name: string;
                        nameLocations: string[];
                        nodeType: string;
                        referencedDeclaration: number;
                        src: string;
                    };
                    id: number;
                    nodeType: string;
                    src: string;
                }[];
                canonicalName: string;
                contractDependencies: never[];
                contractKind: string;
                fullyImplemented: boolean;
                linearizedBaseContracts: number[];
                name: string;
                nameLocation: string;
                scope: number;
                usedErrors: number[];
                usedEvents: number[];
                literals?: undefined;
                absolutePath?: undefined;
                file?: undefined;
                sourceUnit?: undefined;
                symbolAliases?: undefined;
                unitAlias?: undefined;
                errorSelector?: undefined;
                parameters?: undefined;
            })[];
            license: string;
        };
        id: number;
    };
};
declare const ADDRESSES: {
    readonly sepolia: {
        SmartAccount: string;
        SocialRecoveryModule: string;
        SessionKeyValidator: string;
        SessionKeyModule: string;
        SpendingLimitModule: string;
    };
    readonly 11155111: {
        SmartAccount: string;
        SocialRecoveryModule: string;
        SessionKeyValidator: string;
        SessionKeyModule: string;
        SpendingLimitModule: string;
    };
};
type ContractName = keyof typeof ABIS;
declare function getAddress(name: ContractName, chainIdOrName: number | string): string;

export { ABIS, ADDRESSES, type ContractName, getAddress };
